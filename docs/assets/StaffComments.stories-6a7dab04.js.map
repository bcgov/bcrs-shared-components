{"version":3,"file":"StaffComments.stories-6a7dab04.js","sources":["../../src/components/staff-comments/StaffComments.vue"],"sourcesContent":["<template>\r\n  <div\r\n    id=\"staff-comments\"\r\n    class=\"d-inline\"\r\n  >\r\n    <!-- NB: attach the menu to component div so we can unit test it -->\r\n    <v-menu\r\n      v-model=\"showComments\"\r\n      bottom\r\n      attach=\"#staff-comments\"\r\n      :nudge-top=\"nudgeTop\"\r\n      :nudge-left=\"nudgeLeft\"\r\n      :close-on-click=\"false\"\r\n      :close-on-content-click=\"false\"\r\n    >\r\n      <!-- the button -->\r\n      <template #activator=\"{ on, attrs }\">\r\n        <v-btn\r\n          id=\"comments-button\"\r\n          small\r\n          text\r\n          color=\"primary\"\r\n          v-bind=\"attrs\"\r\n          v-on=\"on\"\r\n        >\r\n          <v-icon medium>\r\n            mdi-comment-text-outline\r\n          </v-icon>\r\n          <span>{{ numComments }}</span>\r\n        </v-btn>\r\n      </template>\r\n\r\n      <!-- the menu (panel) -->\r\n      <v-card\r\n        id=\"staff-comment-container\"\r\n        flat\r\n        class=\"px-8 py-6\"\r\n      >\r\n        <v-card-title class=\"d-flex justify-space-between pa-0\">\r\n          <div>\r\n            <v-icon\r\n              medium\r\n              color=\"primary\"\r\n            >\r\n              mdi-comment-text-outline\r\n            </v-icon>\r\n            <span>{{ numComments }}</span>\r\n          </div>\r\n          <v-btn\r\n            id=\"close-button\"\r\n            icon\r\n            large\r\n            class=\"mr-n3\"\r\n            @click=\"close()\"\r\n          >\r\n            <v-icon color=\"primary\">\r\n              mdi-close\r\n            </v-icon>\r\n          </v-btn>\r\n        </v-card-title>\r\n\r\n        <v-card-text class=\"mt-2 pa-0\">\r\n          <v-textarea\r\n            ref=\"textarea\"\r\n            v-model=\"comment\"\r\n            autofocus\r\n            no-resize\r\n            filled\r\n            rows=\"5\"\r\n            placeholder=\"Enter Comments\"\r\n            :rules=\"rules\"\r\n          />\r\n        </v-card-text>\r\n\r\n        <v-card-actions class=\"d-flex justify-space-between pa-0\">\r\n          <div class=\"text-body-2 mt-1\">\r\n            {{ charsRemaining }}\r\n          </div>\r\n          <div class=\"mr-n3\">\r\n            <v-btn\r\n              id=\"save-button\"\r\n              text\r\n              color=\"primary\"\r\n              class=\"font-weight-bold\"\r\n              :loading=\"isSaving\"\r\n              @click=\"save()\"\r\n            >\r\n              Save\r\n            </v-btn>\r\n            <v-btn\r\n              id=\"cancel-button\"\r\n              text\r\n              color=\"primary\"\r\n              @click=\"close()\"\r\n            >\r\n              Cancel\r\n            </v-btn>\r\n          </div>\r\n        </v-card-actions>\r\n\r\n        <v-card-text class=\"mt-6 pa-0\">\r\n          <div\r\n            id=\"existing-comments\"\r\n            class=\"pr-5\"\r\n          >\r\n            <div\r\n              v-for=\"(comment, i) in comments\"\r\n              :key=\"i\"\r\n              class=\"text-body-2\"\r\n            >\r\n              <p\r\n                class=\"pre-line\"\r\n                v-html=\"comment.comment\"\r\n              />\r\n              <p class=\"font-italic\">\r\n                {{ comment.submitterDisplayName }}\r\n                &hyphen;\r\n                {{ apiToPacificDateTime(comment.timestamp) }}\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </v-card-text>\r\n      </v-card>\r\n    </v-menu>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport Vue from 'vue'\r\nimport { Component, Mixins, Prop } from 'vue-property-decorator'\r\nimport { CommentIF, FormIF } from '@bcrs-shared-components/interfaces'\r\nimport { DateMixin } from '@/mixins' // NB: local mixin (StoryBook can't find it otherwise)\r\n\r\n@Component({})\r\nexport default class StaffComments extends Mixins(DateMixin) {\r\n  $refs!: Vue['$refs'] & {\r\n    textarea: FormIF\r\n  }\r\n\r\n  @Prop({ required: true }) readonly axios!: any\r\n  @Prop({ required: true }) readonly businessId!: string\r\n  @Prop({ default: null }) readonly url!: string // pass URL if need to override\r\n  @Prop({ default: 33 }) readonly nudgeTop!: number\r\n  @Prop({ default: 20 }) readonly nudgeLeft!: number\r\n  @Prop({ default: 4096 }) readonly maxLength!: number\r\n\r\n  /** Model property for v-menu (ie, whether to show the panel). */\r\n  private showComments = false\r\n\r\n  /** The list of comments. */\r\n  private comments: Array<CommentIF> = []\r\n\r\n  /** The new comment's text. */\r\n  private comment: string = null\r\n\r\n  /** Whether a comment is being saved. */\r\n  private isSaving = false\r\n\r\n  /** The number of chars remaining in the new comment. */\r\n  get charsRemaining (): number {\r\n    const length = this.comment ? this.comment.length : 0 // comment may be null\r\n    return (this.maxLength - length)\r\n  }\r\n\r\n  /** The Number of Comments string for this entity. */\r\n  get numComments (): string {\r\n    const numComments = this.comments.length\r\n    return (numComments === 1 ? '1 Comment' : `${numComments} Comments`)\r\n  }\r\n\r\n  /** Array of validations rules for the textarea. */\r\n  get rules (): Array<(v) => boolean | string> {\r\n    // exclude whitespace in minimum length check\r\n    // include whitespace in maximum length check\r\n    return [\r\n      val => (val && val.trim().length > 0) || 'Enter a comment.',\r\n      val => (val && val.length <= this.maxLength) || 'Maximum characters reached.'\r\n    ]\r\n  }\r\n  /** get Endpoint URL. */\r\n  get getUrl (): string {\r\n    return this.url || `businesses/${this.businessId}/comments`\r\n  }\r\n\r\n  /** Called when component is created. */\r\n  async created (): Promise<void> {\r\n    await this.fetchStaffComments()\r\n  }\r\n\r\n  /** Fetches the staff comments from the API. */\r\n  private async fetchStaffComments (): Promise<void> {\r\n    this.comments = await this.axios.get(this.getUrl)\r\n      .then(res => {\r\n        const comments = (res && res.data && res.data.comments) || []\r\n        // if comments is array of object with 'comment as key' flatten structure\r\n        if (Array.isArray(comments) && comments[0] && typeof comments[0].comment === 'string') {\r\n          return comments\r\n        }\r\n        return this.flattenAndSortComments(comments)\r\n      })\r\n      .catch(() => [])\r\n  }\r\n\r\n  /** Saves the new comment to the API. */\r\n  protected async save (): Promise<void> {\r\n    // don't save if invalid\r\n    if (!this.$refs.textarea.validate()) return\r\n\r\n    // prevent double saving\r\n    if (this.isSaving) return\r\n    this.isSaving = true\r\n\r\n    const data = {\r\n      comment: {\r\n        businessId: this.businessId,\r\n        comment: this.comment\r\n      }\r\n    }\r\n\r\n    let success = false\r\n    await this.axios.post(this.getUrl, data).then(res => {\r\n      success = true\r\n    }).catch(error => {\r\n      // eslint-disable-next-line no-console\r\n      console.log('save() error =', error)\r\n      alert('Could not save your comment. Please try again or cancel.')\r\n    })\r\n\r\n    this.isSaving = false\r\n    if (success) {\r\n      // clear the data and reload the staff comments\r\n      this.$refs.textarea.reset()\r\n      await this.fetchStaffComments()\r\n    }\r\n  }\r\n\r\n  /** Closes the menu (panel). */\r\n  protected close (): void {\r\n    // clear any errors; leave the data\r\n    this.$refs.textarea.resetValidation()\r\n    this.showComments = false\r\n  }\r\n\r\n  /**\r\n   * Flattens and sorts an array of comments.\r\n   * @param comments the array of comments to sort and deconstruct\r\n   * @returns the sorted and flattened array of comments\r\n   */\r\n  private flattenAndSortComments (comments: Array<any>): Array<any> {\r\n    if (comments && comments.length > 0) {\r\n      // first use map to change comment.comment to comment\r\n      const temp: Array<any> = comments.map(c => c.comment)\r\n      // then sort newest to oldest\r\n      temp.sort((a, b) => new Date(a.timestamp) < new Date(b.timestamp) ? 1 : -1)\r\n      return temp\r\n    }\r\n    return []\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n@import '@/assets/styles/theme.scss';\r\n\r\n#staff-comment-container {\r\n  width: 33rem;\r\n  height: 36rem;\r\n  overflow: hidden;\r\n}\r\n\r\n.v-card__title {\r\n  .v-icon {\r\n    margin-top: 1px;\r\n  }\r\n\r\n  span {\r\n    color: $app-blue;\r\n    font-size: 0.75rem;\r\n    letter-spacing: normal;\r\n    margin-left: 5px;\r\n  }\r\n}\r\n\r\n:deep() {\r\n  .v-textarea textarea {\r\n    font-size: 0.875rem !important;\r\n    color: $gray7 !important;\r\n\r\n    &::placeholder {\r\n      color: $gray7 !important;\r\n    }\r\n  }\r\n\r\n  // reduce overall textarea height when there are no error messages\r\n  .v-textarea:not(.error--text) {\r\n    margin-bottom: -24px;\r\n  }\r\n\r\n  // reduce overall textarea height when there are errors messages\r\n  .v-textarea.error--text {\r\n    margin-bottom: -12px;\r\n  }\r\n\r\n  // shrink input area to make space for error messages\r\n  .v-textarea.error--text textarea {\r\n    height: calc(140px - 12px) !important;\r\n  }\r\n}\r\n\r\n.v-card__actions .body-2 {\r\n  color: $gray7;\r\n}\r\n\r\n#existing-comments {\r\n  height: 16rem;\r\n  max-height: 16rem;\r\n  overflow-y: scroll;\r\n  text-align: left;\r\n\r\n  .body-2 {\r\n    color: $gray7;\r\n    line-height: 1.375rem;\r\n  }\r\n\r\n  .body-2 + .body-2 {\r\n    margin-top: 1rem;\r\n    padding-top: 1rem;\r\n    border-top: 1px solid $gray7;\r\n    border-radius: 0;\r\n  }\r\n}\r\n</style>\r\n"],"names":["StaffComments","Mixins","DateMixin","__publicField","length","numComments","val","res","comments","data","success","error","temp","c","a","b","__decorateClass","Prop","Component"],"mappings":"4pBAsIA,IAAAA,EAAA,cAAAC,EAAAC,CAAA,CAAA,CAAA,kCACAC,EAAA,cAIAA,EAAA,cACAA,EAAA,mBACAA,EAAA,YACAA,EAAA,iBACAA,EAAA,kBACAA,EAAA,kBAGAA,EAAA,oBAAA,IAGAA,EAAA,gBAAA,CAAA,GAGAA,EAAA,eAAA,MAGAA,EAAA,gBAAA,IAGA,IAAA,gBAAA,CACA,MAAAC,EAAA,KAAA,QAAA,KAAA,QAAA,OAAA,EACA,OAAA,KAAA,UAAAA,CACA,CAGA,IAAA,aAAA,CACA,MAAAC,EAAA,KAAA,SAAA,OACA,OAAAA,IAAA,EAAA,YAAA,GAAAA,CAAA,WACA,CAGA,IAAA,OAAA,CAGA,MAAA,IACAC,GAAAA,EAAA,KAAA,EAAA,OAAA,GAAA,mBACAA,GAAAA,GAAAA,EAAA,QAAA,KAAA,WAAA,6BAAA,CAEA,CAEA,IAAA,QAAA,CACA,OAAA,KAAA,KAAA,cAAA,KAAA,UAAA,WACA,CAGA,MAAA,SAAA,CACA,MAAA,KAAA,oBACA,CAGA,MAAA,oBAAA,CACA,KAAA,SAAA,MAAA,KAAA,MAAA,IAAA,KAAA,MAAA,EACA,KAAAC,GAAA,CACA,MAAAC,EAAAD,GAAAA,EAAA,MAAAA,EAAA,KAAA,UAAA,GAEA,OAAA,MAAA,QAAAC,CAAA,GAAAA,EAAA,CAAA,GAAA,OAAAA,EAAA,CAAA,EAAA,SAAA,SACAA,EAEA,KAAA,uBAAAA,CAAA,CAAA,CACA,EACA,MAAA,IAAA,CAAA,CAAA,CACA,CAGA,MAAA,MAAA,CAKA,GAHA,CAAA,KAAA,MAAA,SAAA,SAAA,GAGA,KAAA,SAAA,OACA,KAAA,SAAA,GAEA,MAAAC,EAAA,CACA,QAAA,CACA,WAAA,KAAA,WACA,QAAA,KAAA,OACA,CAAA,EAGA,IAAAC,EAAA,GACA,MAAA,KAAA,MAAA,KAAA,KAAA,OAAAD,CAAA,EAAA,KAAAF,GAAA,CACAG,EAAA,EAAA,CACA,EAAA,MAAAC,GAAA,CAEA,QAAA,IAAA,iBAAAA,CAAA,EACA,MAAA,0DAAA,CAAA,CACA,EAEA,KAAA,SAAA,GACAD,IAEA,KAAA,MAAA,SAAA,QACA,MAAA,KAAA,qBAEA,CAGA,OAAA,CAEA,KAAA,MAAA,SAAA,kBACA,KAAA,aAAA,EACA,CAOA,uBAAAF,EAAA,CACA,GAAAA,GAAAA,EAAA,OAAA,EAAA,CAEA,MAAAI,EAAAJ,EAAA,IAAAK,GAAAA,EAAA,OAAA,EAEA,OAAAD,EAAA,KAAA,CAAAE,EAAAC,IAAA,IAAA,KAAAD,EAAA,SAAA,EAAA,IAAA,KAAAC,EAAA,SAAA,EAAA,EAAA,EAAA,EACAH,CACA,CACA,MAAA,EACA,CACA,EAvHAI,EAAA,CAAAC,EAAA,CAAA,SAAA,GAAA,CAAA,EALAjB,EAKA,UAAA,QAAA,CAAA,EACAgB,EAAA,CAAAC,EAAA,CAAA,SAAA,GAAA,CAAA,EANAjB,EAMA,UAAA,aAAA,CAAA,EACAgB,EAAA,CAAAC,EAAA,CAAA,QAAA,KAAA,CAAA,EAPAjB,EAOA,UAAA,MAAA,CAAA,EACAgB,EAAA,CAAAC,EAAA,CAAA,QAAA,GAAA,CAAA,EARAjB,EAQA,UAAA,WAAA,CAAA,EACAgB,EAAA,CAAAC,EAAA,CAAA,QAAA,GAAA,CAAA,EATAjB,EASA,UAAA,YAAA,CAAA,EACAgB,EAAA,CAAAC,EAAA,CAAA,QAAA,KAAA,CAAA,EAVAjB,EAUA,UAAA,YAAA,CAAA,EAVAA,EAAAgB,EAAA,CADAE,EAAA,CAAA,CAAA,CAAA,EACAlB,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}