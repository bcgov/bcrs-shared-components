{"version":3,"file":"CorrectName.stories-ba409b5b.js","sources":["../../node_modules/vue-property-decorator/lib/helpers/provideInject.js","../../node_modules/vue-property-decorator/lib/decorators/Provide.js","../../src/enums/correct-name-options.ts","../../src/components/correct-name/CorrectCompanyName.vue","../../src/components/correct-name/CorrectNameToNumber.vue","../../src/components/correct-name/CorrectNameRequest.vue","../../src/components/correct-name/CorrectName.vue"],"sourcesContent":["export function needToProduceProvide(original) {\n    return (typeof original !== 'function' ||\n        (!original.managed && !original.managedReactive));\n}\nexport function produceProvide(original) {\n    var provide = function () {\n        var _this = this;\n        var rv = typeof original === 'function' ? original.call(this) : original;\n        rv = Object.create(rv || null);\n        // set reactive services (propagates previous services if necessary)\n        rv[reactiveInjectKey] = Object.create(this[reactiveInjectKey] || {});\n        for (var i in provide.managed) {\n            rv[provide.managed[i]] = this[i];\n        }\n        var _loop_1 = function (i) {\n            rv[provide.managedReactive[i]] = this_1[i]; // Duplicates the behavior of `@Provide`\n            Object.defineProperty(rv[reactiveInjectKey], provide.managedReactive[i], {\n                enumerable: true,\n                configurable: true,\n                get: function () { return _this[i]; },\n            });\n        };\n        var this_1 = this;\n        for (var i in provide.managedReactive) {\n            _loop_1(i);\n        }\n        return rv;\n    };\n    provide.managed = {};\n    provide.managedReactive = {};\n    return provide;\n}\n/** Used for keying reactive provide/inject properties */\nexport var reactiveInjectKey = '__reactiveInject__';\nexport function inheritInjected(componentOptions) {\n    // inject parent reactive services (if any)\n    if (!Array.isArray(componentOptions.inject)) {\n        componentOptions.inject = componentOptions.inject || {};\n        componentOptions.inject[reactiveInjectKey] = {\n            from: reactiveInjectKey,\n            default: {},\n        };\n    }\n}\n","import { createDecorator } from 'vue-class-component';\nimport { inheritInjected, needToProduceProvide, produceProvide, } from '../helpers/provideInject';\n/**\n * decorator of a provide\n * @param key key\n * @return PropertyDecorator | void\n */\nexport function Provide(key) {\n    return createDecorator(function (componentOptions, k) {\n        var provide = componentOptions.provide;\n        inheritInjected(componentOptions);\n        if (needToProduceProvide(provide)) {\n            provide = componentOptions.provide = produceProvide(provide);\n        }\n        provide.managed[k] = key || k;\n    });\n}\n","export enum CorrectNameOptions {\r\n  CORRECT_NAME = 'correct-name',\r\n  CORRECT_NAME_TO_NUMBER = 'correct-name-to-number',\r\n  CORRECT_NEW_NR = 'correct-new-nr'\r\n}\r\n","<template>\r\n  <v-form\r\n    id=\"correct-company-name-form\"\r\n    ref=\"form\"\r\n    v-model=\"formValid\"\r\n  >\r\n    <v-row no-gutters>\r\n      <v-col>\r\n        <v-text-field\r\n          id=\"company-name-textfield\"\r\n          v-model=\"textfield\"\r\n          class=\"mb-n3\"\r\n          filled\r\n          :rules=\"companyNameRules\"\r\n        />\r\n      </v-col>\r\n    </v-row>\r\n  </v-form>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport Vue from 'vue'\r\nimport { Component, Emit, Prop, Watch, Provide } from 'vue-property-decorator'\r\nimport { CorrectNameOptions } from '@bcrs-shared-components/enums'\r\nimport { VuetifyRuleFunction } from '@bcrs-shared-components/types'\r\n\r\n@Component({})\r\nexport default class CorrectCompanyName extends Vue {\r\n  // Refs\r\n  $refs: {\r\n    form: HTMLFormElement\r\n  }\r\n\r\n  @Prop({ required: true }) readonly companyName!: string\r\n  @Prop({ required: true }) readonly formType!: CorrectNameOptions\r\n  @Prop({ required: true }) readonly validate!: boolean\r\n\r\n  // Local properties\r\n  @Provide() formValid = false // initially invalid\r\n  @Provide() textfield = ''\r\n\r\n  // Rules\r\n  get companyNameRules (): Array<VuetifyRuleFunction> {\r\n    return [\r\n      (v: string) => !!v || ' A company name is required',\r\n      (v: string) => (v !== this.companyName) || ' Enter a new company name'\r\n    ]\r\n  }\r\n\r\n  /** Watch for company name changed. */\r\n  @Watch('companyName', { immediate: true })\r\n  onCompanyNameChanged (val: string) {\r\n    this.textfield = val\r\n  }\r\n\r\n  /** Watch for form submission and emit results. */\r\n  @Watch('formType')\r\n  private onSubmit (): void {\r\n    // process only when current form type matches\r\n    if (this.formType === CorrectNameOptions.CORRECT_NAME) {\r\n      // emit new data\r\n      this.emitCompanyName(this.textfield)\r\n      this.emitSaved(true)\r\n    }\r\n  }\r\n\r\n  /** Validate or reset validation when parent tells us. */\r\n  @Watch('validate')\r\n  private onValidate (val: boolean): void {\r\n    if (val) this.$refs.form.validate()\r\n    else this.$refs.form.resetValidation()\r\n  }\r\n\r\n  /** Watch for changes and inform parent when form/component is valid. */\r\n  @Watch('formValid')\r\n  @Emit('valid')\r\n  private emitValid (): boolean {\r\n    return this.formValid\r\n  }\r\n\r\n  /** Inform parent that the process is complete. */\r\n  @Emit('saved')\r\n  private emitSaved (val: boolean): void {}\r\n\r\n  /** Inform parent of updated company name. */\r\n  @Emit('update:companyName')\r\n  private emitCompanyName (name: string): void {}\r\n}\r\n</script>\r\n","<template>\r\n  <v-form\r\n    id=\"correct-name-to-number-form\"\r\n    ref=\"form\"\r\n    v-model=\"formValid\"\r\n  >\r\n    <v-row no-gutters>\r\n      <v-col>\r\n        <v-checkbox\r\n          id=\"correct-name-to-number-checkbox\"\r\n          v-model=\"checkbox\"\r\n          class=\"mb-n5\"\r\n          :label=\"`Change the company name to ${numberedName}`\"\r\n          :rules=\"[(v) => v]\"\r\n        />\r\n      </v-col>\r\n    </v-row>\r\n  </v-form>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport Vue from 'vue'\r\nimport { Component, Prop, Watch, Emit } from 'vue-property-decorator'\r\nimport { CorpTypeCd, CorrectNameOptions } from '@bcrs-shared-components/enums'\r\n\r\n@Component({})\r\nexport default class CorrectNameToNumber extends Vue {\r\n  // Refs\r\n  $refs: {\r\n    form: HTMLFormElement\r\n  }\r\n\r\n  @Prop({ required: true }) readonly businessId!: string\r\n  @Prop({ required: true }) readonly entityType!: CorpTypeCd\r\n  @Prop({ required: true }) readonly formType!: CorrectNameOptions\r\n  @Prop({ required: true }) readonly validate!: boolean\r\n\r\n  checkbox = false\r\n  formValid = false // initially invalid\r\n\r\n  /** The business' numbered name. */\r\n  get numberedName (): string {\r\n    const id = this.businessId?.substring(2) || 'Unknown'\r\n\r\n    switch (this.entityType) {\r\n      case CorpTypeCd.BC_ULC_COMPANY:\r\n        return `${id} B.C. UNLIMITED LIABILITY COMPANY`\r\n      case CorpTypeCd.BC_CCC:\r\n        return `${id} B.C. COMMUNITY CONTRIBUTION COMPANY LTD.`\r\n      default:\r\n        return `${id} B.C. LTD.`\r\n    }\r\n  }\r\n\r\n  /** Watch for form submission and emit results. */\r\n  @Watch('formType')\r\n  private onSubmit (): void {\r\n    // process only when current form type matches\r\n    if (this.formType === CorrectNameOptions.CORRECT_NAME_TO_NUMBER) {\r\n      // emit new data\r\n      this.emitCompanyName(this.numberedName)\r\n      this.emitSaved(true)\r\n    }\r\n  }\r\n\r\n  /** Validate or reset validation when parent tells us. */\r\n  @Watch('validate')\r\n  private onValidate (val: boolean): void {\r\n    if (val) this.$refs.form.validate()\r\n    else this.$refs.form.resetValidation()\r\n  }\r\n\r\n  /** Watch for changes and inform parent when form/component is valid. */\r\n  @Watch('formValid')\r\n  @Emit('valid')\r\n  private emitValid (): boolean {\r\n    return this.formValid\r\n  }\r\n\r\n  /** Inform parent that the process is complete. */\r\n  @Emit('saved')\r\n  private emitSaved (val: boolean): void {}\r\n\r\n  /** Inform parent of updated company name. */\r\n  @Emit('update:companyName')\r\n  private emitCompanyName (name: string): void {}\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n@import '@/assets/styles/theme.scss';\r\n\r\n.v-input--selection-controls {\r\n  padding: 0;\r\n  margin: 0;\r\n}\r\n\r\n:deep(.theme--light.v-label) {\r\n  font-size: 1rem;\r\n  color: $gray7;\r\n  font-weight: normal;\r\n}\r\n</style>\r\n","<template>\r\n  <v-form\r\n    id=\"correct-name-request-form\"\r\n    ref=\"form\"\r\n    v-model=\"formValid\"\r\n    lazy-validation\r\n  >\r\n    <ConfirmDialogShared\r\n      ref=\"confirm\"\r\n      attach=\"#app\"\r\n    />\r\n\r\n    <v-row no-gutters>\r\n      <v-col\r\n        cols=\"1\"\r\n        class=\"mt-3\"\r\n      >\r\n        <v-chip\r\n          outlined\r\n          class=\"step-icon\"\r\n        >\r\n          1\r\n        </v-chip>\r\n      </v-col>\r\n      <v-col>\r\n        <v-text-field\r\n          id=\"nr-number\"\r\n          v-model=\"nrNumber\"\r\n          filled\r\n          persistent-hint\r\n          class=\"text-input-field\"\r\n          label=\"Enter the NR Number\"\r\n          hint=\"Example: NR 1234567\"\r\n          :rules=\"nrNumRules\"\r\n          @keyup=\"nrNumber = nrNumber.toUpperCase()\"\r\n        />\r\n      </v-col>\r\n    </v-row>\r\n\r\n    <v-row\r\n      no-gutters\r\n      class=\"mt-4 mb-n1\"\r\n    >\r\n      <v-col\r\n        cols=\"1\"\r\n        class=\"mt-3\"\r\n      >\r\n        <v-chip\r\n          outlined\r\n          class=\"step-icon\"\r\n        >\r\n          2\r\n        </v-chip>\r\n      </v-col>\r\n      <v-col cols=\"5\">\r\n        <v-text-field\r\n          id=\"applicant-phone\"\r\n          v-model=\"applicantPhone\"\r\n          filled\r\n          persistent-hint\r\n          class=\"text-input-field\"\r\n          label=\"Applicant's Phone Number\"\r\n          hint=\"Example: 555-555-5555\"\r\n          type=\"tel\"\r\n          :rules=\"phoneRules\"\r\n        />\r\n      </v-col>\r\n      <div class=\"ma-5\">\r\n        or\r\n      </div>\r\n      <v-col>\r\n        <v-text-field\r\n          id=\"applicant-email\"\r\n          v-model=\"applicantEmail\"\r\n          filled\r\n          persistent-hint\r\n          class=\"text-input-field\"\r\n          label=\"Applicant's Notification Email\"\r\n          hint=\"Example: name@email.com\"\r\n          type=\"email\"\r\n          :rules=\"emailRules\"\r\n        />\r\n      </v-col>\r\n    </v-row>\r\n  </v-form>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Component, Emit, Mixins, Prop, Watch } from 'vue-property-decorator'\r\nimport { ConfirmDialog as ConfirmDialogShared } from '@bcrs-shared-components/confirm-dialog'\r\nimport { NameRequestMixin } from '@bcrs-shared-components/mixins'\r\nimport { ConfirmDialogType, NameRequestIF } from '@bcrs-shared-components/interfaces'\r\nimport { CorpTypeCd, CorrectNameOptions } from '@bcrs-shared-components/enums'\r\nimport { GetCorpFullDescription } from '@bcrs-shared-components/corp-type-module'\r\n\r\n@Component({\r\n  components: {\r\n    ConfirmDialogShared\r\n  }\r\n})\r\nexport default class CorrectNameRequest extends Mixins(NameRequestMixin) {\r\n  // Refs\r\n  $refs!: {\r\n    confirm: ConfirmDialogType\r\n    form: HTMLFormElement\r\n  }\r\n\r\n  @Prop({ required: true }) readonly businessId!: string\r\n  @Prop({ required: true }) readonly entityType!: CorpTypeCd\r\n  @Prop({ required: true }) readonly fetchAndValidateNr!: (...args) => Promise<NameRequestIF>\r\n  @Prop({ required: true }) readonly formType!: CorrectNameOptions\r\n  @Prop({ required: true }) readonly nameRequest!: NameRequestIF\r\n  @Prop({ required: true }) readonly validate!: boolean\r\n\r\n  // Local properties\r\n  applicantEmail = ''\r\n  applicantPhone = ''\r\n  formValid = false // initially invalid\r\n  nrNumber = ''\r\n\r\n  // Validation rules\r\n  readonly nrNumRules = [\r\n    (v: string) => !!v || 'Name Request Number is required',\r\n    (v: string) => this.isValidNrNumber(v) || 'Name Request Number is invalid'\r\n  ]\r\n  readonly phoneRules = [\r\n    (v: string) => !/^\\s/g.test(v) || 'Invalid spaces', // leading spaces\r\n    (v: string) => !/\\s$/g.test(v) || 'Invalid spaces', // trailing spaces\r\n    (v: string) => !(v?.length > 12) || 'Phone number is invalid'\r\n  ]\r\n  readonly emailRules = [\r\n    (v: string) => !/^\\s/g.test(v) || 'Invalid spaces', // leading spaces\r\n    (v: string) => !/\\s$/g.test(v) || 'Invalid spaces', // trailing spaces\r\n    (v: string) => this.isValidEmail(v) || 'Email is invalid'\r\n  ]\r\n\r\n  /** Whether this component is valid. */\r\n  get componentValid (): boolean {\r\n    // 1. rules are valid\r\n    // 2. we have a NR number\r\n    // 3. we have either a phone number or an email\r\n    return (\r\n      this.formValid &&\r\n      !!this.nrNumber &&\r\n      (!!this.applicantPhone || !!this.applicantEmail)\r\n    )\r\n  }\r\n\r\n  /** Returns true if NR number is valid. */\r\n  private isValidNrNumber (value: string): boolean {\r\n    const VALID_FORMAT = new RegExp(/^(NR )\\d{7}$/)\r\n    return VALID_FORMAT.test(value)\r\n  }\r\n\r\n  /** Returns true if email is valid. */\r\n  private isValidEmail (value: string): boolean {\r\n    // don't validate empty value\r\n    if (value?.length < 1) return true\r\n\r\n    // if we have a phone number then email is optional\r\n    if (!!this.applicantPhone && !!value) return true\r\n\r\n    // check email format\r\n    // eslint-disable-next-line max-len\r\n    const VALID_FORMAT = new RegExp(/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/)\r\n    return VALID_FORMAT.test(value)\r\n  }\r\n\r\n  /** Watch for form submission and emit results. */\r\n  @Watch('formType')\r\n  private async onSubmit (): Promise<any> {\r\n    // process only when current form type matches\r\n    if (this.formType === CorrectNameOptions.CORRECT_NEW_NR) {\r\n      try {\r\n        // validate and return the name request data\r\n        const nr = await this.fetchAndValidateNr(this.nrNumber, this.businessId, this.applicantPhone,\r\n          this.applicantEmail)\r\n\r\n        if (this.entityType !== nr.legalType) {\r\n          // invalid NR type - inform parent the process is done and show dialog\r\n          this.$refs.form.resetValidation()\r\n          this.emitSaved(false)\r\n\r\n          const nrFullDescription = GetCorpFullDescription(nr.legalType)\r\n          const entityFullDescription = GetCorpFullDescription(this.entityType)\r\n          const dialogContent = `<p class=\"info-text\">This ${nrFullDescription} Name Request ` +\r\n            `does not match the current business type <b>${entityFullDescription}</b>.\\n\\n` +\r\n            `The Name Request type must match the business type before you can continue.</p>`\r\n          await this.showConfirmDialog(\r\n            this.$refs.confirm,\r\n            'Name Request Type Does Not Match Business Type',\r\n            dialogContent\r\n          )\r\n        } else {\r\n          // emit new data\r\n          this.emitNameRequest(nr)\r\n          this.emitCompanyName(this.getNrApprovedName(nr))\r\n          this.emitSaved(true)\r\n        }\r\n      } catch (error) {\r\n        alert((error as any).message)\r\n\r\n        // inform parent that process is complete\r\n        this.$refs.form.resetValidation()\r\n        this.emitSaved(false)\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Validate or reset validation when parent tells us. */\r\n  @Watch('validate')\r\n  private onValidate (val: boolean): void {\r\n    if (val) this.$refs.form.validate()\r\n    else this.$refs.form.resetValidation()\r\n  }\r\n\r\n  /** Watch for changes and inform parent when component is valid. */\r\n  @Watch('componentValid')\r\n  @Emit('valid')\r\n  private emitValid (): boolean {\r\n    return this.componentValid\r\n  }\r\n\r\n  /** Inform parent that the process is complete. */\r\n  @Emit('saved')\r\n  private emitSaved (val: boolean): void {}\r\n\r\n  /** Inform parent of updated company name. */\r\n  @Emit('update:companyName')\r\n  private emitCompanyName (name: string): void {}\r\n\r\n  /** Inform parent of updated name request object. */\r\n  @Emit('update:nameRequest')\r\n  private emitNameRequest (nameRequest: NameRequestIF): void {}\r\n\r\n  /**\r\n   * Helper to show the confirm dialogs.\r\n   * @param ref The dialog reference\r\n   * @param title The title content in dialog header\r\n   * @param message The content body\r\n   * */\r\n  private async showConfirmDialog (ref: ConfirmDialogType, title: string, message: string):\r\n    Promise<boolean> {\r\n    return ref.open(title, message, {\r\n      width: '45rem',\r\n      persistent: true,\r\n      yes: 'OK',\r\n      no: null,\r\n      cancel: null\r\n    }).catch(() => false)\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n@import '@/assets/styles/theme.scss';\r\n\r\n.step-icon {\r\n  border-color: $gray9;\r\n  font-weight: bold;\r\n  pointer-events: none;\r\n}\r\n\r\n// hide uppercase transformation delay from user\r\n:deep(#nr-number) {\r\n  text-transform: uppercase;\r\n}\r\n\r\n:deep(.theme--light.v-label) {\r\n  font-size: 1rem;\r\n  color: $gray7;\r\n  font-weight: normal;\r\n}\r\n</style>\r\n","<template>\r\n  <v-container\r\n    id=\"correct-name-options\"\r\n    class=\"pa-0 pr-4\"\r\n  >\r\n    <p\r\n      v-if=\"!isOneOption\"\r\n      class=\"info-text mb-5 pb-5 bottom-border\"\r\n    >\r\n      You can {{ actionTxt || 'correct the company name' }} in one of the following ways:\r\n    </p>\r\n\r\n    <v-expansion-panels\r\n      v-model=\"panel\"\r\n      class=\"bottom-border\"\r\n      accordion\r\n    >\r\n      <v-expansion-panel\r\n        v-for=\"(item,i) in displayedOptions\"\r\n        :id=\"`x-panel-${item.id}`\"\r\n        :key=\"i\"\r\n        class=\"mb-4\"\r\n        :disabled=\"isOneOption\"\r\n        @click=\"identifyForm(item.id)\"\r\n      >\r\n        <v-expansion-panel-header :class=\"{'name-options-header': isOneOption}\">\r\n          <span class=\"names-option-title\">{{ item.title }}</span>\r\n          <template #actions>\r\n            <v-icon color=\"primary\">\r\n              mdi-menu-down\r\n            </v-icon>\r\n          </template>\r\n        </v-expansion-panel-header>\r\n\r\n        <v-expansion-panel-content class=\"name-options-content pt-4\">\r\n          <div\r\n            v-if=\"item.description\"\r\n            class=\"info-text mb-4\"\r\n            color=\"primary\"\r\n          >\r\n            {{ item.description }}\r\n          </div>\r\n          <component\r\n            :is=\"item.component\"\r\n            :key=\"item.id\"\r\n            :businessId=\"businessId\"\r\n            :companyName=\"companyName\"\r\n            :entityType=\"entityType\"\r\n            :fetchAndValidateNr=\"fetchAndValidateNr\"\r\n            :formType=\"formType\"\r\n            :nameRequest=\"nameRequest\"\r\n            :validate=\"validate\"\r\n            @saved=\"emitSaved($event)\"\r\n            @update:nameRequest=\"emitNameRequest($event)\"\r\n            @update:companyName=\"emitCompanyName($event)\"\r\n            @valid=\"isSubComponentValid = $event\"\r\n          />\r\n        </v-expansion-panel-content>\r\n      </v-expansion-panel>\r\n    </v-expansion-panels>\r\n\r\n    <div class=\"action-btns\">\r\n      <v-btn\r\n        id=\"done-btn\"\r\n        large\r\n        color=\"primary\"\r\n        :loading=\"isLoading\"\r\n        @click=\"submitNameCorrection()\"\r\n      >\r\n        <span>Done</span>\r\n      </v-btn>\r\n\r\n      <v-btn\r\n        id=\"cancel-btn\"\r\n        large\r\n        outlined\r\n        color=\"primary\"\r\n        @click=\"emitCancel()\"\r\n      >\r\n        <span>Cancel</span>\r\n      </v-btn>\r\n    </div>\r\n  </v-container>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport Vue from 'vue'\r\nimport { Component, Emit, Prop } from 'vue-property-decorator'\r\nimport { NameRequestIF } from '@bcrs-shared-components/interfaces'\r\nimport { CorrectNameOptions } from '@bcrs-shared-components/enums'\r\nimport { CorpTypeCd } from '@bcrs-shared-components/corp-type-module'\r\nimport CorrectCompanyName from './CorrectCompanyName.vue'\r\nimport CorrectNameToNumber from './CorrectNameToNumber.vue'\r\nimport CorrectNameRequest from './CorrectNameRequest.vue'\r\n\r\ninterface CorrectNameOptionIF {\r\n  id: CorrectNameOptions,\r\n  title: string,\r\n  description?: string,\r\n  component: any\r\n}\r\n\r\n/**\r\n * Operation:\r\n * 1. To initialize this component option list, pass in an array of id's of the components you want to display.\r\n *    I.e., ['correct-new-nr', 'correct-name', 'correct-name-to-number']\r\n * 2. If this options list is only passed one value the option panel will be open by default.\r\n * 3. The parent component will have to watch for the 'save' and 'cancel' events and handle them accordingly.\r\n */\r\n@Component({\r\n  components: {\r\n    CorrectCompanyName,\r\n    CorrectNameToNumber,\r\n    CorrectNameRequest\r\n  }\r\n})\r\nexport default class CorrectName extends Vue {\r\n  @Prop({ default: null }) readonly actionTxt!: string\r\n  @Prop({ required: true }) readonly businessId!: string\r\n  @Prop({ required: true }) readonly companyName!: string\r\n  @Prop({ default: () => [] }) readonly correctionNameChoices!: Array<CorrectNameOptions>\r\n  @Prop({ required: true }) readonly entityType!: CorpTypeCd\r\n  @Prop({ required: true }) readonly fetchAndValidateNr!: () => Promise<NameRequestIF>\r\n  @Prop({ required: true }) readonly formType!: CorrectNameOptions\r\n  @Prop({ required: true }) readonly nameRequest!: NameRequestIF\r\n\r\n  // local properties\r\n  protected displayedOptions: Array<CorrectNameOptionIF> = []\r\n  protected panel: number = null\r\n  protected currentFormType: CorrectNameOptions = null\r\n  protected isLoading = false\r\n  protected isSubComponentValid = false\r\n  protected validate = false // don't validate initially\r\n\r\n  readonly correctionNameOptions: Array<CorrectNameOptionIF> = [\r\n    {\r\n      id: CorrectNameOptions.CORRECT_NAME,\r\n      title: 'Edit the company name',\r\n      description: 'Correct typographical errors in the existing company name.',\r\n      component: CorrectCompanyName\r\n    },\r\n    {\r\n      id: CorrectNameOptions.CORRECT_NAME_TO_NUMBER,\r\n      title: 'Use the incorporation number as the name',\r\n      description: null,\r\n      component: CorrectNameToNumber\r\n    },\r\n    {\r\n      id: CorrectNameOptions.CORRECT_NEW_NR,\r\n      title: 'Use a new name request number',\r\n      description: 'Enter the new Name Request Number (e.g., NR 1234567) and either the applicant phone number ' +\r\n        'OR the applicant email that was used when the name was requested.',\r\n      component: CorrectNameRequest\r\n    }\r\n  ]\r\n\r\n  /** Called when component is mounted. */\r\n  mounted (): void {\r\n    // Filter the options to be displayed by what id's were passed from the parent component\r\n    this.displayedOptions = this.correctionNameOptions.filter(\r\n      option => this.correctionNameChoices.includes(option.id)\r\n    )\r\n    // open by default and assign id if only 1 option\r\n    if (this.isOneOption) {\r\n      this.panel = 0\r\n      this.currentFormType = this.displayedOptions[0].id\r\n    }\r\n  }\r\n\r\n  /** True if only one correction name choice is configured. */\r\n  get isOneOption (): boolean {\r\n    return (this.correctionNameChoices.length === 1)\r\n  }\r\n\r\n  /** When Done button is clicked, triggers form submission. */\r\n  protected submitNameCorrection (): void {\r\n    if (this.isSubComponentValid) {\r\n      this.isLoading = true\r\n      this.emitFormType(this.currentFormType)\r\n      // disable validation for next time\r\n      this.validate = false\r\n    } else {\r\n      // tell sub-component to validate\r\n      this.validate = true\r\n    }\r\n  }\r\n\r\n  /** When a panel is expanded, identifies the selected form. */\r\n  protected identifyForm (type: CorrectNameOptions) {\r\n    this.currentFormType = type\r\n    this.isSubComponentValid = false\r\n  }\r\n\r\n  /** When Cancel button is clicked, informs parent that name correction is cancelled. */\r\n  @Emit('cancel')\r\n  protected emitCancel (): void {\r\n    // first disable validation, then clear current panel\r\n    this.validate = false\r\n    this.panel = null\r\n  }\r\n\r\n  /** Inform parent that name correction process is done. */\r\n  @Emit('saved')\r\n  protected emitSaved (saved: boolean): boolean {\r\n    this.isLoading = false\r\n    this.emitFormType(null)\r\n    if (saved) this.panel = null\r\n    return saved\r\n  }\r\n\r\n  /** Inform parent of updated company name. */\r\n  @Emit('update:companyName')\r\n  private emitCompanyName (name: string): void {}\r\n\r\n  /** Inform parent of updated form type. */\r\n  @Emit('update:formType')\r\n  private emitFormType (formType: CorrectNameOptions): void {}\r\n\r\n  /** Inform parent of updated name request object. */\r\n  @Emit('update:nameRequest')\r\n  private emitNameRequest (nameRequest: NameRequestIF): void {}\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n@import '@/assets/styles/theme.scss';\r\n\r\n.name-options-header {\r\n  align-items: start;\r\n}\r\n\r\n.bottom-border {\r\n  border-color: rgba(0, 0, 0, 0.1) !important;\r\n  border-bottom: 1px solid;\r\n}\r\n\r\n.v-expansion-panel:not(:first-child) {\r\n  padding-top: 1.25rem;\r\n}\r\n\r\n.names-option-title {\r\n  font-size: 1rem;\r\n  color: $app-blue;\r\n}\r\n\r\n.v-expansion-panel-content {\r\n  :deep(.v-expansion-panel-content__wrap) {\r\n    padding: 0;\r\n  }\r\n}\r\n\r\n.v-expansion-panel-header {\r\n  padding: .25rem 0 0;\r\n  color: $app-blue;\r\n}\r\n\r\n.v-expansion-panel--active > .v-expansion-panel-header {\r\n  font-weight: bold;\r\n  min-height: 3rem;\r\n\r\n  .names-option-title {\r\n    color: $gray9 !important;\r\n  }\r\n}\r\n\r\n.action-btns {\r\n  margin-top: 30px;\r\n  display: flex;\r\n  justify-content: flex-end;\r\n\r\n  .v-btn + .v-btn {\r\n    margin-left: 0.5rem;\r\n  }\r\n\r\n  .v-btn {\r\n    min-width: 6.5rem;\r\n  }\r\n\r\n  #done-btn[disabled] {\r\n    color: white !important;\r\n    background-color: $app-blue !important;\r\n    opacity: 0.2;\r\n  }\r\n}\r\n</style>\r\n"],"names":["needToProduceProvide","original","produceProvide","provide","_this","rv","reactiveInjectKey","i","_loop_1","this_1","inheritInjected","componentOptions","Provide","key","createDecorator","k","CorrectNameOptions","CorrectCompanyName","Vue","__publicField","v","val","name","__decorateClass","Prop","Watch","Emit","Component","CorrectNameToNumber","id","_a","CorpTypeCd","CorrectNameRequest","Mixins","NameRequestMixin","value","nr","nrFullDescription","GetCorpFullDescription","entityFullDescription","dialogContent","error","nameRequest","ref","title","message","ConfirmDialogShared","CorrectName","option","type","saved","formType"],"mappings":"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","x_google_ignoreList":[0,1]}