{"version":3,"file":"EffectiveDateTime.stories-aeaa04f1.js","sources":["../../src/enums/effective-date-types.ts","../../src/components/effective-date-time/EffectiveDateTime.vue"],"sourcesContent":["export enum EffectiveDateTypes {\r\n  FUTURE_EFFECTIVE = 'futureEffective',\r\n  IMMEDIATE = 'immediate'\r\n}\r\n","<template>\r\n  <v-card\r\n    id=\"effective-date-time-box\"\r\n    flat\r\n  >\r\n    <v-radio-group\r\n      v-model=\"effectiveDateType\"\r\n      column\r\n      class=\"pt-0 mt-0\"\r\n    >\r\n      <v-radio\r\n        label=\"Immediate (date and time of filing)\"\r\n        :value=\"EffectiveDateTypes.IMMEDIATE\"\r\n      />\r\n      <v-radio\r\n        label=\"A date and time in the future\"\r\n        :value=\"EffectiveDateTypes.FUTURE_EFFECTIVE\"\r\n      />\r\n    </v-radio-group>\r\n\r\n    <v-form\r\n      ref=\"form\"\r\n      class=\"date-time-selectors\"\r\n    >\r\n      <DatePicker\r\n        ref=\"datePickerRef\"\r\n        title=\"Date\"\r\n        nudge-right=\"40\"\r\n        :inputRules=\"dateRules\"\r\n        :disablePicker=\"effectiveDateType !== EffectiveDateTypes.FUTURE_EFFECTIVE\"\r\n        :minDate=\"dateToYyyyMmDd(minDate)\"\r\n        :maxDate=\"dateToYyyyMmDd(maxDate)\"\r\n        @emitDate=\"dateText = $event\"\r\n        @emitCancel=\"dateText = ''\"\r\n      />\r\n\r\n      <v-row>\r\n        <v-col\r\n          cols=\"12\"\r\n          sm=\"6\"\r\n          md=\"3\"\r\n        >\r\n          <v-combobox\r\n            id=\"hour-selector\"\r\n            ref=\"hourSelector\"\r\n            v-model=\"selectHour\"\r\n            filled\r\n            class=\"mr-1\"\r\n            label=\"Hour\"\r\n            :items=\"hours\"\r\n            :disabled=\"!isFutureEffective\"\r\n            :rules=\"hourRules\"\r\n          />\r\n        </v-col>\r\n        <span\r\n          class=\"time-colon\"\r\n          :class=\"{ 'disabled': !isFutureEffective }\"\r\n        >:</span>\r\n        <v-col\r\n          cols=\"12\"\r\n          sm=\"6\"\r\n          md=\"3\"\r\n        >\r\n          <v-combobox\r\n            id=\"minute-selector\"\r\n            ref=\"minuteSelector\"\r\n            v-model=\"selectMinute\"\r\n            filled\r\n            class=\"ml-1\"\r\n            label=\"Minute\"\r\n            :items=\"minutes\"\r\n            :disabled=\"!isFutureEffective\"\r\n            :rules=\"minuteRules\"\r\n          />\r\n        </v-col>\r\n        <v-col\r\n          cols=\"12\"\r\n          sm=\"6\"\r\n          md=\"3\"\r\n        >\r\n          <v-select\r\n            id=\"period-selector\"\r\n            v-model=\"selectPeriod\"\r\n            filled\r\n            :items=\"timePeriod\"\r\n            :disabled=\"!isFutureEffective\"\r\n          />\r\n        </v-col>\r\n        <v-col\r\n          cols=\"12\"\r\n          sm=\"6\"\r\n          md=\"3\"\r\n          class=\"label-col\"\r\n        >\r\n          <span\r\n            class=\"time-zone-label\"\r\n            :class=\"{ 'disabled': !isFutureEffective }\"\r\n          >Pacific time</span>\r\n        </v-col>\r\n      </v-row>\r\n\r\n      <!-- display validation alert only after date and time have been entered -->\r\n      <v-row v-if=\"isFutureEffective && dateText && (selectHour.length > 0) && (selectMinute.length > 0)\">\r\n        <v-col class=\"validation-alert\">\r\n          <p\r\n            v-if=\"isUnderTime\"\r\n            class=\"validation-alert-msg\"\r\n          >\r\n            The time must be at least {{ dateToPacificTime(minDate) }} for the selected date\r\n          </p>\r\n          <p\r\n            v-if=\"isOverTime\"\r\n            class=\"validation-alert-msg\"\r\n          >\r\n            The time must be at most {{ dateToPacificTime(maxDate) }} for the selected date\r\n          </p>\r\n        </v-col>\r\n      </v-row>\r\n    </v-form>\r\n  </v-card>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport Vue from 'vue'\r\nimport { Component, Emit, Mixins, Prop, Watch } from 'vue-property-decorator'\r\nimport { DatePicker } from '@bcrs-shared-components/date-picker'\r\nimport { DateMixin } from '@/mixins' // NB: local mixin (StoryBook can't find it otherwise)\r\nimport { EffectiveDateTypes } from '@bcrs-shared-components/enums'\r\nimport { EffectiveDateTimeIF, FormFieldType, FormIF } from '@bcrs-shared-components/interfaces'\r\n\r\nenum PeriodTypes {\r\n  AM = 'am',\r\n  PM = 'pm'\r\n}\r\n\r\n@Component({\r\n  components: {\r\n    DatePicker\r\n  }\r\n})\r\nexport default class EffectiveDateTime extends Mixins(DateMixin) {\r\n  readonly MIN_DIFF_MINUTES = 3\r\n  readonly MAX_DIFF_DAYS = 10\r\n\r\n  // Add element types to refs\r\n  $refs!: {\r\n    form: FormIF,\r\n    datePickerRef: any, // should be DatePicker but TS complains\r\n    hourSelector: FormFieldType, // used in unit tests\r\n    minuteSelector: FormFieldType // used in unit tests\r\n  }\r\n\r\n  /** Whether to parse the initial effective date-time into the controls. */\r\n  @Prop({ default: false }) readonly parseInitial!: boolean\r\n\r\n  /** Current JS date, expected to be passed in periodically. */\r\n  @Prop() readonly currentJsDate!: Date\r\n\r\n  /** Effective Date Time object, for initial config. */\r\n  @Prop() readonly effectiveDateTime!: EffectiveDateTimeIF\r\n\r\n  /** Whether to perform validation. */\r\n  @Prop() readonly isAppValidate!: boolean\r\n\r\n  // Declaration for template\r\n  readonly EffectiveDateTypes = EffectiveDateTypes\r\n\r\n  /** Whether Is Immediate is selected. */\r\n  private isImmediate = false\r\n\r\n  /** Whether Is Future Effective is selected. */\r\n  private isFutureEffective = false\r\n\r\n  /** The minimum date that can be entered (ie, now + 3 minutes). */\r\n  private minDate: Date = null\r\n\r\n  /** The maximum date that can be entered (ie, 10 days from now). */\r\n  private maxDate: Date = null\r\n\r\n  // V-model values\r\n  private effectiveDateType: EffectiveDateTypes = null\r\n  private datePicker = ''\r\n  private dateText = ''\r\n  private selectHour: string[] = []\r\n  private selectMinute: string[] = []\r\n  private selectPeriod = PeriodTypes.AM\r\n\r\n  // Combobox items\r\n  private hours = [...Array(12).keys()].map(num => (num + 1).toString())\r\n  private minutes = [...Array(60).keys()].map(num => num.toString().padStart(2, '0'))\r\n  private timePeriod = [PeriodTypes.AM, PeriodTypes.PM]\r\n\r\n  /** Validations rules for date text field. */\r\n  get dateRules (): Array<(v) => boolean | string> {\r\n    // only apply rules when Future Effective is selected\r\n    if (this.isFutureEffective && this.isAppValidate) {\r\n      const minDateStr = this.dateToPacificDate(this.minDate, true)\r\n      const maxDateStr = this.dateToPacificDate(this.maxDate, true)\r\n      return [\r\n        (v: string) => !!v || 'Select date',\r\n        (v: string) => this.isValidDateRange(v) || `Date must be between ${minDateStr} and ${maxDateStr}`\r\n      ]\r\n    }\r\n    return []\r\n  }\r\n\r\n  /**\r\n   * True if date is >= the minimum (ie, today) and <= the maximum (ie, the 10th day).\r\n   * This is used for Vue form validation (in Date Rules above).\r\n   */\r\n  private isValidDateRange (v: string): boolean {\r\n    let date = new Date(v)\r\n    // only compare year/month/day (ignore time)\r\n    date = new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate())\r\n    const minDay = new Date(this.minDate.getFullYear(), this.minDate.getMonth(), this.minDate.getDate())\r\n    const maxDay = new Date(this.maxDate.getFullYear(), this.maxDate.getMonth(), this.maxDate.getDate())\r\n    return (date >= minDay && date <= maxDay)\r\n  }\r\n\r\n  /** Validations rules for hour selector. */\r\n  get hourRules (): Array<(v) => boolean | string> {\r\n    // only apply rules when Future Effective is selected\r\n    if (this.isFutureEffective && this.isAppValidate) {\r\n      return [\r\n        (v: string[]) => (v.length > 0) || 'Select hour',\r\n        (v: string) => (/^([1-9]|1[012])$/.test(v)) || ''\r\n      ]\r\n    }\r\n    return []\r\n  }\r\n\r\n  /** Validations rules for minute selector. */\r\n  get minuteRules (): Array<(v) => boolean | string> {\r\n    // only apply rules when Future Effective is selected\r\n    if (this.isFutureEffective && this.isAppValidate) {\r\n      return [\r\n        (v: string[]) => (v.length > 0) || 'Select minute',\r\n        (v: string) => (/^([0-5]?[0-9])$/.test(v)) || ''\r\n      ]\r\n    }\r\n    return []\r\n  }\r\n\r\n  /**\r\n   * True if time is under the minimum (ie, for today).\r\n   * This is a non-form validation - it needs to be checked for overall component validity.\r\n   */\r\n  get isUnderTime (): boolean {\r\n    if (this.effectiveDateTime.effectiveDate) {\r\n      const date = new Date(this.effectiveDateTime.effectiveDate)\r\n      // use max seconds and milliseconds for comparison\r\n      date.setSeconds(59, 999)\r\n      return (date.getTime() < this.minDate.getTime())\r\n    }\r\n    return false\r\n  }\r\n\r\n  /**\r\n   * True if time is over the maximum (ie, for 10th day).\r\n   * This is a non-form validation - it needs to be checked for overall component validity.\r\n   */\r\n  get isOverTime (): boolean {\r\n    if (this.effectiveDateTime.effectiveDate) {\r\n      const date = new Date(this.effectiveDateTime.effectiveDate)\r\n      // use min seconds and milliseconds for comparison\r\n      date.setSeconds(0, 0)\r\n      return (date.getTime() > this.maxDate.getTime())\r\n    }\r\n    return false\r\n  }\r\n\r\n  /** Called when component is mounted. */\r\n  mounted (): void {\r\n    if (this.parseInitial) this.parseInitialEffectiveDateTime()\r\n  }\r\n\r\n  /** Parses initial Effective Date Time and sets state. */\r\n  private parseInitialEffectiveDateTime (): void {\r\n    // set the chosen effective date option\r\n    this.isFutureEffective = this.effectiveDateTime.isFutureEffective\r\n    if (this.isFutureEffective === true) {\r\n      this.effectiveDateType = EffectiveDateTypes.FUTURE_EFFECTIVE\r\n    } else if (this.isFutureEffective === false) {\r\n      this.effectiveDateType = EffectiveDateTypes.IMMEDIATE\r\n    } else {\r\n      this.effectiveDateType = null\r\n    }\r\n\r\n    // try to create Date object\r\n    const effectiveDate = this.effectiveDateTime.effectiveDate\r\n    const date = effectiveDate && new Date(effectiveDate)\r\n\r\n    if (date) {\r\n      // set model properties\r\n      let hour = date.getHours()\r\n      const minute = date.getMinutes()\r\n      const period = hour < 12 ? PeriodTypes.AM : PeriodTypes.PM\r\n\r\n      // convert 24h -> 12h and 0h -> 12h\r\n      if (hour > 12) {\r\n        hour -= 12\r\n      } else if (hour === 0) {\r\n        hour = 12\r\n      }\r\n\r\n      // set model values\r\n      this.dateText = this.dateToYyyyMmDd(date)\r\n      this.selectHour = [hour.toString()]\r\n      this.selectMinute = [minute.toString().padStart(2, '0')]\r\n      this.selectPeriod = period\r\n    }\r\n  }\r\n\r\n  /** Constructs the effective date and updates the parent. */\r\n  private async constructAndUpdate (): Promise<void> {\r\n    // wait for form to update itself before checking validity\r\n    await Vue.nextTick()\r\n\r\n    const isDateValid = this.$refs.datePickerRef.validateForm()\r\n    const isTimeValid = this.$refs.form.validate()\r\n    if (isDateValid && isTimeValid && !!this.selectHour.length && !!this.selectMinute.length) {\r\n      const year = +this.dateText.slice(0, 4)\r\n      const month = (+this.dateText.slice(5, 7) - 1) // zero-relative\r\n      const date = +this.dateText.slice(8, 10)\r\n      let hours = +this.selectHour\r\n      const minutes = +this.selectMinute\r\n\r\n      // convert 12 am -> 0\r\n      if (this.selectPeriod === PeriodTypes.AM && +this.selectHour === 12) {\r\n        hours = 0\r\n      }\r\n\r\n      // convert 1-11 pm -> 13-23\r\n      if (this.selectPeriod === PeriodTypes.PM && +this.selectHour !== 12) {\r\n        hours += 12\r\n      }\r\n\r\n      // construct date in UTC using parameters in Pacific time\r\n      const dateTime = this.createUtcDate(year, month, date, hours, minutes)\r\n\r\n      // Set Effective Date\r\n      this.emitEffectiveDate(dateTime)\r\n    }\r\n\r\n    // update validity every time\r\n    this.emitValid()\r\n  }\r\n\r\n  @Watch('currentJsDate', { immediate: true })\r\n  onCurrentJsDateChanged (val: Date) {\r\n    // safety check (val may be null)\r\n    if (val) {\r\n      // set new min date\r\n      const minDate = new Date()\r\n      // add 3 minutes\r\n      minDate.setTime(val.getTime() + this.MIN_DIFF_MINUTES * 60 * 1000)\r\n      this.minDate = minDate\r\n\r\n      // set new max date\r\n      const maxDate = new Date()\r\n      // add 10 days\r\n      maxDate.setTime(val.getTime() + this.MAX_DIFF_DAYS * 24 * 60 * 60 * 1000)\r\n      this.maxDate = maxDate\r\n\r\n      // check if form is still valid\r\n      this.emitValid()\r\n    }\r\n  }\r\n\r\n  @Watch('datePicker')\r\n  onDatePickerChanged (val: string): void {\r\n    this.dateText = val\r\n    // the watcher for dateText will fire next\r\n  }\r\n\r\n  @Watch('dateText')\r\n  onDateTextChanged (val: string): void {\r\n    if (this.isFutureEffective) {\r\n      this.constructAndUpdate()\r\n    }\r\n  }\r\n\r\n  @Watch('selectHour')\r\n  onSelectHourChanged (val: string): void {\r\n    if (this.isFutureEffective) {\r\n      this.constructAndUpdate()\r\n    }\r\n  }\r\n\r\n  @Watch('selectMinute')\r\n  onSelectMinuteChanged (val: string): void {\r\n    if (this.isFutureEffective) {\r\n      this.constructAndUpdate()\r\n    }\r\n  }\r\n\r\n  @Watch('selectPeriod')\r\n  onSelectPeriodChanged (val: string): void {\r\n    if (this.isFutureEffective) {\r\n      this.constructAndUpdate()\r\n    }\r\n  }\r\n\r\n  @Watch('effectiveDateType')\r\n  onEffectiveDateTypeChanged (val: EffectiveDateTypes): void {\r\n    this.isImmediate = (val === EffectiveDateTypes.IMMEDIATE)\r\n    this.isFutureEffective = (val === EffectiveDateTypes.FUTURE_EFFECTIVE)\r\n\r\n    // if we changed to IMMEDIATE then clear the model values (otherwise retain them)\r\n    if (this.isImmediate) {\r\n      this.datePicker = ''\r\n      this.dateText = ''\r\n      this.selectHour = []\r\n      this.selectMinute = []\r\n      this.selectPeriod = PeriodTypes.AM\r\n      this.$refs.datePickerRef.clearDate()\r\n    }\r\n\r\n    // update the parent\r\n    this.emitIsFutureEffective(this.isFutureEffective)\r\n    this.emitEffectiveDate(null)\r\n    this.emitValid()\r\n  }\r\n\r\n  @Emit('isFutureEffective')\r\n  private emitIsFutureEffective (val: boolean): void {}\r\n\r\n  @Emit('effectiveDate')\r\n  private emitEffectiveDate (val: Date): void {}\r\n\r\n  @Emit('valid')\r\n  private async emitValid (): Promise<boolean> {\r\n    // localized dateText check for future effective selections\r\n    const validDateText = this.isFutureEffective ? !!this.dateText : true\r\n\r\n    // wait for form to update itself before checking validity\r\n    await Vue.nextTick()\r\n    const isDateValid = this.$refs.datePickerRef.validateForm()\r\n    const isTimeValid = this.$refs.form.validate()\r\n    return this.isImmediate || (!!this.effectiveDateType &&\r\n      isDateValid && isTimeValid &&\r\n      !!this.selectHour.length && !!this.selectMinute.length &&\r\n      !this.isUnderTime &&\r\n      !this.isOverTime &&\r\n      validDateText\r\n    )\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n@import '@/assets/styles/theme.scss';\r\n\r\n#effective-date-time-box {\r\n  padding: 2rem 2rem 0.5rem;\r\n  line-height: 1.2rem;\r\n}\r\n\r\n:deep(.v-label) {\r\n  color: $gray7;\r\n  font-weight: normal;\r\n}\r\n\r\n.v-radio {\r\n  padding-bottom: .5rem;\r\n}\r\n\r\n.date-time-selectors {\r\n  margin-left: 2rem;\r\n}\r\n\r\n.time-colon {\r\n  margin-left: -4px;\r\n  margin-right: -4px;\r\n  padding-top: 2rem;\r\n  font-size: 25px;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .time-colon {\r\n    display: none;\r\n  }\r\n}\r\n\r\n.label-col {\r\n  position: relative;\r\n  align-self: center;\r\n}\r\n\r\n.time-zone-label {\r\n  position: absolute;\r\n  top: -10px;\r\n  color: $gray7;\r\n}\r\n\r\n.disabled {\r\n  color: $gray6;\r\n}\r\n\r\n.validation-alert {\r\n  position: relative;\r\n\r\n  .validation-alert-msg {\r\n    line-height: 12px;\r\n    position: absolute;\r\n    top: -2rem;\r\n    padding: 0 12px;\r\n    font-size: 12px;\r\n    font-weight: 500;\r\n    color: $BCgovInputError !important;\r\n  }\r\n}\r\n\r\n:deep() {\r\n  .v-icon.v-icon.v-icon--disabled {\r\n    color: $app-blue !important;\r\n  }\r\n  .v-input--is-disabled {\r\n    opacity: 0.4;\r\n  }\r\n  .v-input--is-disabled .v-input__control > .v-input__slot:before {\r\n    border-image: none;\r\n  }\r\n}\r\n</style>\r\n"],"names":["EffectiveDateTypes","EffectiveDateTime","Mixins","DateMixin","__publicField","num","minDateStr","maxDateStr","v","date","minDay","maxDay","effectiveDate","hour","minute","period","Vue","isDateValid","isTimeValid","year","month","hours","minutes","dateTime","val","minDate","maxDate","validDateText","__decorateClass","Prop","Watch","Emit","Component","DatePicker"],"mappings":"ohBAAY,IAAAA,GAAAA,IACVA,EAAA,iBAAmB,kBACnBA,EAAA,UAAY,YAFFA,IAAAA,GAAA,CAAA,CAAA,8LC4IZ,IAAAC,EAAA,cAAAC,EAAAC,CAAA,CAAA,CAAA,kCACAC,EAAA,wBAAA,GACAA,EAAA,qBAAA,IAGAA,EAAA,cAQAA,EAAA,qBAGAA,EAAA,sBAGAA,EAAA,0BAGAA,EAAA,sBAGAA,EAAA,0BAAAJ,GAGAI,EAAA,mBAAA,IAGAA,EAAA,yBAAA,IAGAA,EAAA,eAAA,MAGAA,EAAA,eAAA,MAGAA,EAAA,yBAAA,MACAA,EAAA,kBAAA,IACAA,EAAA,gBAAA,IACAA,EAAA,kBAAA,CAAA,GACAA,EAAA,oBAAA,CAAA,GACAA,EAAA,oBAAA,MAGAA,EAAA,aAAA,CAAA,GAAA,MAAA,EAAA,EAAA,KAAA,CAAA,EAAA,IAAAC,IAAAA,EAAA,GAAA,SAAA,CAAA,GACAD,EAAA,eAAA,CAAA,GAAA,MAAA,EAAA,EAAA,KAAA,CAAA,EAAA,OAAAC,EAAA,WAAA,SAAA,EAAA,GAAA,CAAA,GACAD,EAAA,kBAAA,CAAA,KAAA,OAGA,IAAA,WAAA,CAEA,GAAA,KAAA,mBAAA,KAAA,cAAA,CACA,MAAAE,EAAA,KAAA,kBAAA,KAAA,QAAA,EAAA,EACAC,EAAA,KAAA,kBAAA,KAAA,QAAA,EAAA,EACA,MAAA,CACAC,GAAA,CAAA,CAAAA,GAAA,cACAA,GAAA,KAAA,iBAAAA,CAAA,GAAA,wBAAAF,CAAA,QAAAC,CAAA,EAAA,CAEA,CACA,MAAA,EACA,CAMA,iBAAAC,EAAA,CACA,IAAAC,EAAA,IAAA,KAAAD,CAAA,EAEAC,EAAA,IAAA,KAAAA,EAAA,eAAA,EAAAA,EAAA,cAAAA,EAAA,WAAA,CAAA,EACA,MAAAC,EAAA,IAAA,KAAA,KAAA,QAAA,YAAA,EAAA,KAAA,QAAA,SAAA,EAAA,KAAA,QAAA,QAAA,CAAA,EACAC,EAAA,IAAA,KAAA,KAAA,QAAA,YAAA,EAAA,KAAA,QAAA,SAAA,EAAA,KAAA,QAAA,QAAA,CAAA,EACA,OAAAF,GAAAC,GAAAD,GAAAE,CACA,CAGA,IAAA,WAAA,CAEA,OAAA,KAAA,mBAAA,KAAA,cACA,CACAH,GAAAA,EAAA,OAAA,GAAA,cACAA,GAAA,mBAAA,KAAAA,CAAA,GAAA,EAAA,EAGA,EACA,CAGA,IAAA,aAAA,CAEA,OAAA,KAAA,mBAAA,KAAA,cACA,CACAA,GAAAA,EAAA,OAAA,GAAA,gBACAA,GAAA,kBAAA,KAAAA,CAAA,GAAA,EAAA,EAGA,EACA,CAMA,IAAA,aAAA,CACA,GAAA,KAAA,kBAAA,cAAA,CACA,MAAAC,EAAA,IAAA,KAAA,KAAA,kBAAA,aAAA,EAEA,OAAAA,EAAA,WAAA,GAAA,GAAA,EACAA,EAAA,QAAA,EAAA,KAAA,QAAA,QAAA,CACA,CACA,MAAA,EACA,CAMA,IAAA,YAAA,CACA,GAAA,KAAA,kBAAA,cAAA,CACA,MAAAA,EAAA,IAAA,KAAA,KAAA,kBAAA,aAAA,EAEA,OAAAA,EAAA,WAAA,EAAA,CAAA,EACAA,EAAA,QAAA,EAAA,KAAA,QAAA,QAAA,CACA,CACA,MAAA,EACA,CAGA,SAAA,CACA,KAAA,cAAA,KAAA,8BAAA,CACA,CAGA,+BAAA,CAEA,KAAA,kBAAA,KAAA,kBAAA,kBACA,KAAA,oBAAA,GACA,KAAA,kBAAAT,EAAA,iBACA,KAAA,oBAAA,GACA,KAAA,kBAAAA,EAAA,UAEA,KAAA,kBAAA,KAIA,MAAAY,EAAA,KAAA,kBAAA,cACAH,EAAAG,GAAA,IAAA,KAAAA,CAAA,EAEA,GAAAH,EAAA,CAEA,IAAAI,EAAAJ,EAAA,WACA,MAAAK,EAAAL,EAAA,aACAM,EAAAF,EAAA,GAAA,KAAA,KAGAA,EAAA,GACAA,GAAA,GACAA,IAAA,IACAA,EAAA,IAIA,KAAA,SAAA,KAAA,eAAAJ,CAAA,EACA,KAAA,WAAA,CAAAI,EAAA,SAAA,CAAA,EACA,KAAA,aAAA,CAAAC,EAAA,WAAA,SAAA,EAAA,GAAA,CAAA,EACA,KAAA,aAAAC,CACA,CACA,CAGA,MAAA,oBAAA,CAEA,MAAAC,EAAA,WAEA,MAAAC,EAAA,KAAA,MAAA,cAAA,aAAA,EACAC,EAAA,KAAA,MAAA,KAAA,SAAA,EACA,GAAAD,GAAAC,GAAA,KAAA,WAAA,QAAA,KAAA,aAAA,OAAA,CACA,MAAAC,EAAA,CAAA,KAAA,SAAA,MAAA,EAAA,CAAA,EACAC,EAAA,CAAA,KAAA,SAAA,MAAA,EAAA,CAAA,EAAA,EACAX,EAAA,CAAA,KAAA,SAAA,MAAA,EAAA,EAAA,EACA,IAAAY,EAAA,CAAA,KAAA,WACA,MAAAC,EAAA,CAAA,KAAA,aAGA,KAAA,eAAA,MAAA,CAAA,KAAA,YAAA,KACAD,EAAA,GAIA,KAAA,eAAA,MAAA,CAAA,KAAA,YAAA,KACAA,GAAA,IAIA,MAAAE,EAAA,KAAA,cAAAJ,EAAAC,EAAAX,EAAAY,EAAAC,CAAA,EAGA,KAAA,kBAAAC,CAAA,CACA,CAGA,KAAA,UAAA,CACA,CAGA,uBAAAC,EAAA,CAEA,GAAAA,EAAA,CAEA,MAAAC,MAAA,KAEAA,EAAA,QAAAD,EAAA,QAAA,EAAA,KAAA,iBAAA,GAAA,GAAA,EACA,KAAA,QAAAC,EAGA,MAAAC,MAAA,KAEAA,EAAA,QAAAF,EAAA,UAAA,KAAA,cAAA,GAAA,GAAA,GAAA,GAAA,EACA,KAAA,QAAAE,EAGA,KAAA,UAAA,CACA,CACA,CAGA,oBAAAF,EAAA,CACA,KAAA,SAAAA,CAEA,CAGA,kBAAAA,EAAA,CACA,KAAA,mBACA,KAAA,mBAAA,CAEA,CAGA,oBAAAA,EAAA,CACA,KAAA,mBACA,KAAA,mBAAA,CAEA,CAGA,sBAAAA,EAAA,CACA,KAAA,mBACA,KAAA,mBAAA,CAEA,CAGA,sBAAAA,EAAA,CACA,KAAA,mBACA,KAAA,mBAAA,CAEA,CAGA,2BAAAA,EAAA,CACA,KAAA,YAAAA,IAAAxB,EAAA,UACA,KAAA,kBAAAwB,IAAAxB,EAAA,iBAGA,KAAA,cACA,KAAA,WAAA,GACA,KAAA,SAAA,GACA,KAAA,WAAA,GACA,KAAA,aAAA,GACA,KAAA,aAAA,KACA,KAAA,MAAA,cAAA,aAIA,KAAA,sBAAA,KAAA,iBAAA,EACA,KAAA,kBAAA,IAAA,EACA,KAAA,UAAA,CACA,CAGA,sBAAAwB,EAAA,CAAA,CAGA,kBAAAA,EAAA,CAAA,CAGA,MAAA,WAAA,CAEA,MAAAG,EAAA,KAAA,kBAAA,CAAA,CAAA,KAAA,SAAA,GAGA,MAAAX,EAAA,WACA,MAAAC,EAAA,KAAA,MAAA,cAAA,aAAA,EACAC,EAAA,KAAA,MAAA,KAAA,SAAA,EACA,OAAA,KAAA,aAAA,CAAA,CAAA,KAAA,mBACAD,GAAAC,GACA,CAAA,CAAA,KAAA,WAAA,QAAA,CAAA,CAAA,KAAA,aAAA,QACA,CAAA,KAAA,aACA,CAAA,KAAA,YACAS,CAEA,CACA,EAtSAC,EAAA,CAAAC,EAAA,CAAA,QAAA,GAAA,CAAA,EAbA5B,EAaA,UAAA,eAAA,CAAA,EAGA2B,EAAA,CAAAC,EAAA,CAAA,EAhBA5B,EAgBA,UAAA,gBAAA,CAAA,EAGA2B,EAAA,CAAAC,EAAA,CAAA,EAnBA5B,EAmBA,UAAA,oBAAA,CAAA,EAGA2B,EAAA,CAAAC,EAAA,CAAA,EAtBA5B,EAsBA,UAAA,gBAAA,CAAA,EA2LA2B,EAAA,CADAE,EAAA,gBAAA,CAAA,UAAA,GAAA,CAAA,EAhNA7B,EAiNA,UAAA,yBAAA,CAAA,EAqBA2B,EAAA,CADAE,EAAA,YAAA,CAAA,EArOA7B,EAsOA,UAAA,sBAAA,CAAA,EAMA2B,EAAA,CADAE,EAAA,UAAA,CAAA,EA3OA7B,EA4OA,UAAA,oBAAA,CAAA,EAOA2B,EAAA,CADAE,EAAA,YAAA,CAAA,EAlPA7B,EAmPA,UAAA,sBAAA,CAAA,EAOA2B,EAAA,CADAE,EAAA,cAAA,CAAA,EAzPA7B,EA0PA,UAAA,wBAAA,CAAA,EAOA2B,EAAA,CADAE,EAAA,cAAA,CAAA,EAhQA7B,EAiQA,UAAA,wBAAA,CAAA,EAOA2B,EAAA,CADAE,EAAA,mBAAA,CAAA,EAvQA7B,EAwQA,UAAA,6BAAA,CAAA,EAqBA2B,EAAA,CADAG,EAAA,mBAAA,CAAA,EA5RA9B,EA6RA,UAAA,wBAAA,CAAA,EAGA2B,EAAA,CADAG,EAAA,eAAA,CAAA,EA/RA9B,EAgSA,UAAA,oBAAA,CAAA,EAGA2B,EAAA,CADAG,EAAA,OAAA,CAAA,EAlSA9B,EAmSA,UAAA,YAAA,CAAA,EAnSAA,EAAA2B,EAAA,CALAI,EAAA,CACA,WAAA,CACA,WAAAC,CACA,CAAA,CACA,CAAA,EACAhC,CAAA;;;;;;;;;;;;;;;"}