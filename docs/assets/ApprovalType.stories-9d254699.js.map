{"version":3,"file":"ApprovalType.stories-9d254699.js","sources":["../../src/enums/approval-types.ts","../../src/components/approval-type/ApprovalType.vue"],"sourcesContent":["/** Restoration approval types. */\nexport enum ApprovalTypes {\n  VIA_COURT_ORDER = 'courtOrder',\n  VIA_REGISTRAR = 'registrar'\n}\n","<template>\n  <div\n    id=\"approval-type\"\n    :class=\"{ 'invalid-section': invalidSection }\"\n  >\n    <v-row no-gutters>\n      <v-col\n        cols=\"12\"\n        sm=\"3\"\n        class=\"pr-4\"\n      >\n        <label :class=\"{ 'error-text': invalidSection }\">Approval Type</label>\n      </v-col>\n\n      <v-col\n        cols=\"12\"\n        sm=\"9\"\n        class=\"mb-n5\"\n      >\n        <v-radio-group\n          class=\"mt-0\"\n          :value=\"approvalTypeSelected\"\n          @change=\"setApprovalTypeSelected($event)\"\n        >\n          <!-- court order section -->\n          <v-radio\n            v-if=\"isCourtOrderRadio\"\n            id=\"court-order-radio\"\n            :label=\"getRadioText(ApprovalTypes.VIA_COURT_ORDER)\"\n            :value=\"ApprovalTypes.VIA_COURT_ORDER\"\n          />\n          <span\n            v-else\n            class=\"v-label\"\n          >\n            {{ getRadioText(ApprovalTypes.VIA_COURT_ORDER) }}\n          </span>\n          <v-expand-transition>\n            <v-form\n              v-if=\"approvalTypeSelected === ApprovalTypes.VIA_COURT_ORDER\"\n              ref=\"courtNumRef\"\n            >\n              <v-text-field\n                id=\"court-order-number-input\"\n                class=\"ml-8 mt-2\"\n                label=\"Court Order Number\"\n                :value=\"courtOrderNumberText\"\n                :rules=\"validate ? courtOrderNumRules : []\"\n                hide-details=\"auto\"\n                filled\n                @input=\"setCourtOrderNumberText($event)\"\n              />\n            </v-form>\n          </v-expand-transition>\n\n          <!-- registrar section -->\n          <v-radio\n            v-if=\"isCourtOrderRadio\"\n            id=\"registrar-radio\"\n            class=\"mt-4\"\n            :label=\"getRadioText(ApprovalTypes.VIA_REGISTRAR)\"\n            :value=\"ApprovalTypes.VIA_REGISTRAR\"\n          />\n          <v-expand-transition>\n            <div v-if=\"approvalTypeSelected === ApprovalTypes.VIA_REGISTRAR\">\n              <div class=\"ml-8 mt-2\">\n                <span class=\"v-label\">Enter the date the Notice of the Application for Restoration was published in\n                  the BC Gazette:\n                </span>\n                <DatePicker\n                  id=\"date-picker-notice\"\n                  class=\"mt-2\"\n                  title=\"Select Date\"\n                  :nudgeRight=\"150\"\n                  :initialValue=\"noticeDateText\"\n                  :errorMsg=\"noticeDateErrorMsg\"\n                  @emitDateSync=\"setNoticeDateText($event)\"\n                />\n              </div>\n              <div class=\"ml-8 mt-5\">\n                <span class=\"v-label\">Enter the date the Application for Restoration was mailed to the company:</span>\n                <DatePicker\n                  id=\"date-picker-application\"\n                  class=\"mt-2\"\n                  title=\"Select Date\"\n                  :nudgeRight=\"150\"\n                  :initialValue=\"applicationDateText\"\n                  :errorMsg=\"applicationDateErrorMsg\"\n                  @emitDateSync=\"setApplicationDateText($event)\"\n                />\n              </div>\n            </div>\n          </v-expand-transition>\n        </v-radio-group>\n      </v-col>\n    </v-row>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport Vue from 'vue'\nimport { Component, Emit, Prop, Watch } from 'vue-property-decorator'\nimport { ApprovalTypes } from '@bcrs-shared-components/enums'\nimport { FormIF } from '@bcrs-shared-components/interfaces'\nimport { DatePicker } from '@bcrs-shared-components/date-picker'\n\n@Component({\n  components: {\n    DatePicker\n  }\n})\nexport default class ApprovalType extends Vue {\n  // Refs\n  $refs!: Vue['$refs'] & {\n    courtNumRef: FormIF\n  }\n\n  /**\n   * The initial court order number.\n   * Is only read when the component is mounted.\n   */\n  @Prop({ default: '' }) readonly courtOrderNumber!: string\n\n  /** Whether restoration was approved by the registrar. */\n  @Prop({ default: false }) readonly approvedByRegistrar!: boolean\n\n  /** Whether restoration was approved by court order. */\n  @Prop({ default: false }) readonly approvedByCourtOrder!: boolean\n\n  /** Filing name used in radio options. */\n  @Prop({ default: 'restoration' }) readonly filingType!: string\n\n  /**\n   * The initial date the notice of the application for restoration was published in the BC Gazette.\n   * Is only read when the component is mounted.\n   */\n  @Prop({ default: '' }) readonly noticeDate!: string\n\n  /**\n   * The initial date the application for restoration was mailed to the company.\n   * Is only read when the component is mounted.\n   */\n  @Prop({ default: '' }) readonly applicationDate!: string\n\n  /** Whether this section is invalid. */\n  @Prop({ default: false }) readonly invalidSection!: boolean\n\n  /** Whether to show the court order radio button. */\n  @Prop({ default: true }) readonly isCourtOrderRadio!: boolean\n\n  /** Whether validation is enabled. */\n  @Prop({ default: false }) readonly validate!: boolean\n\n  // Local properties\n  private approvalTypeSelected = null as ApprovalTypes\n  private courtOrderNumberText = ''\n  private noticeDateText = ''\n  private applicationDateText = ''\n\n  // For template\n  readonly ApprovalTypes = ApprovalTypes\n\n  /** Text field rules. */\n  readonly courtOrderNumRules = [\n    (v: string) => (!v || !/^\\s/g.test(v)) || 'Invalid spaces', // leading spaces\n    (v: string) => (!v || !/\\s$/g.test(v)) || 'Invalid spaces', // trailing spaces\n    (v: string) => (!v || !(v.length < 5)) || 'Court order number is too short',\n    (v: string) => (!v || !(v.length > 20)) || 'Court order number is too long',\n    (v: string) => !!v || 'A Court Order number is required'\n  ]\n\n  get noticeDateErrorMsg (): string {\n    return (this.validate && !this.noticeDateText) ? 'Date is required' : null\n  }\n\n  get applicationDateErrorMsg (): string {\n    return (this.validate && !this.applicationDateText) ? 'Date is required' : null\n  }\n\n  /** Called when component is mounted. */\n  mounted (): void {\n    // copy props to mutable properties\n    if (this.approvedByRegistrar) {\n      // first set approval type, then set values\n      // otherwise, validation will fail\n      this.setApprovalTypeSelected(ApprovalTypes.VIA_REGISTRAR)\n      this.setNoticeDateText(this.noticeDate)\n      this.setApplicationDateText(this.applicationDate)\n    } else if (this.approvedByCourtOrder) {\n      // first set approval type, then set values\n      // otherwise, validation will fail\n      this.setApprovalTypeSelected(ApprovalTypes.VIA_COURT_ORDER)\n      this.setCourtOrderNumberText(this.courtOrderNumber)\n    }\n  }\n\n  /** When validate flag is set, validates the component. */\n  @Watch('validate')\n  private async onValidateChanged (validate: boolean): Promise<void> {\n    if (validate) {\n      // wait for rules to get processed before validating\n      await Vue.nextTick()\n      this.validateComponent()\n    }\n  }\n\n  /** Validates the component and emits the validity. */\n  @Emit('valid')\n  private validateComponent (): boolean {\n    let valid = true\n    if (this.approvalTypeSelected === ApprovalTypes.VIA_COURT_ORDER) {\n      valid = this.$refs.courtNumRef?.validate()\n    } else if (this.approvalTypeSelected === ApprovalTypes.VIA_REGISTRAR) {\n      // Valid if validation flag is not set.\n      // Valid if both dates are selected.\n      valid = !this.validate || (!!this.noticeDateText && !!this.applicationDateText)\n    } else {\n      // no type selected (invalid)\n      valid = false\n    }\n    return valid\n  }\n\n  /** Sets Approval Type property, clears old data and emits the new value. */\n  @Emit('approvalTypeChange')\n  private async setApprovalTypeSelected (approvalTypeSelected: ApprovalTypes): Promise<void> {\n    this.approvalTypeSelected = approvalTypeSelected\n\n    // wait for rules to get processed before validating\n    await Vue.nextTick()\n\n    // clear old data\n    if (approvalTypeSelected === ApprovalTypes.VIA_REGISTRAR) {\n      this.setCourtOrderNumberText('')\n    } else if (approvalTypeSelected === ApprovalTypes.VIA_COURT_ORDER) {\n      this.setNoticeDateText('')\n      this.setApplicationDateText('')\n    }\n  }\n\n  /** Sets Court Order Number property, validates the component and emits the new value. */\n  @Emit('courtNumberChange')\n  setCourtOrderNumberText (courtOrderNumberText: string): void {\n    this.courtOrderNumberText = courtOrderNumberText\n    this.validateComponent()\n  }\n\n  /** Returns the radio button text. */\n  private getRadioText (option: string): string {\n    if (option === ApprovalTypes.VIA_COURT_ORDER && this.isCourtOrderRadio) {\n      return `This ${this.filingType} is approved by court order.`\n    } else if (option === ApprovalTypes.VIA_COURT_ORDER && !this.isCourtOrderRadio) {\n      return `Enter a Court Order number, as the restoration of this company was ordered by the court:`\n    }\n    if (option === ApprovalTypes.VIA_REGISTRAR) {\n      return `This ${this.filingType} is approved by registrar.`\n    }\n    return '[unknown]' // should never happen\n  }\n\n  /** Sets Notice Date property, validates the component and emits the new value. */\n  @Emit('update:noticeDate')\n  private setNoticeDateText (noticeDateText: string): void {\n    this.noticeDateText = noticeDateText\n    this.validateComponent()\n  }\n\n  /** Sets Application Date property, validates the component and emits the new value. */\n  @Emit('update:applicationDate')\n  private setApplicationDateText (applicationDateText: string): void {\n    this.applicationDateText = applicationDateText\n    this.validateComponent()\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n@import '@/assets/styles/theme.scss';\n\nlabel {\n  font-weight: bold;\n}\n\n:deep() {\n  .v-input .v-label {\n    font-weight: normal;\n    color: $gray7;\n  }\n\n  .theme--light.v-input input {\n    font-weight: normal;\n    color: $gray7;\n  }\n}\n</style>\n"],"names":["ApprovalTypes","ApprovalType","Vue","__publicField","v","validate","valid","_a","approvalTypeSelected","courtOrderNumberText","option","noticeDateText","applicationDateText","__decorateClass","Prop","Watch","Emit","Component","DatePicker"],"mappings":"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"}