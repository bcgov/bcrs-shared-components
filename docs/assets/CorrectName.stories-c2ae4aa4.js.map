{"version":3,"file":"CorrectName.stories-c2ae4aa4.js","sources":["../../node_modules/vue-property-decorator/lib/helpers/provideInject.js","../../node_modules/vue-property-decorator/lib/decorators/Provide.js","../../src/enums/correct-name-options.ts","../../src/components/correct-name/CorrectCompanyName.vue","../../src/components/correct-name/CorrectNameToNumber.vue","../../src/components/correct-name/CorrectNameRequest.vue","../../src/components/correct-name/CorrectName.vue"],"sourcesContent":["export function needToProduceProvide(original) {\n    return (typeof original !== 'function' ||\n        (!original.managed && !original.managedReactive));\n}\nexport function produceProvide(original) {\n    var provide = function () {\n        var _this = this;\n        var rv = typeof original === 'function' ? original.call(this) : original;\n        rv = Object.create(rv || null);\n        // set reactive services (propagates previous services if necessary)\n        rv[reactiveInjectKey] = Object.create(this[reactiveInjectKey] || {});\n        for (var i in provide.managed) {\n            rv[provide.managed[i]] = this[i];\n        }\n        var _loop_1 = function (i) {\n            rv[provide.managedReactive[i]] = this_1[i]; // Duplicates the behavior of `@Provide`\n            Object.defineProperty(rv[reactiveInjectKey], provide.managedReactive[i], {\n                enumerable: true,\n                configurable: true,\n                get: function () { return _this[i]; },\n            });\n        };\n        var this_1 = this;\n        for (var i in provide.managedReactive) {\n            _loop_1(i);\n        }\n        return rv;\n    };\n    provide.managed = {};\n    provide.managedReactive = {};\n    return provide;\n}\n/** Used for keying reactive provide/inject properties */\nexport var reactiveInjectKey = '__reactiveInject__';\nexport function inheritInjected(componentOptions) {\n    // inject parent reactive services (if any)\n    if (!Array.isArray(componentOptions.inject)) {\n        componentOptions.inject = componentOptions.inject || {};\n        componentOptions.inject[reactiveInjectKey] = {\n            from: reactiveInjectKey,\n            default: {},\n        };\n    }\n}\n","import { createDecorator } from 'vue-class-component';\nimport { inheritInjected, needToProduceProvide, produceProvide, } from '../helpers/provideInject';\n/**\n * decorator of a provide\n * @param key key\n * @return PropertyDecorator | void\n */\nexport function Provide(key) {\n    return createDecorator(function (componentOptions, k) {\n        var provide = componentOptions.provide;\n        inheritInjected(componentOptions);\n        if (needToProduceProvide(provide)) {\n            provide = componentOptions.provide = produceProvide(provide);\n        }\n        provide.managed[k] = key || k;\n    });\n}\n","export enum CorrectNameOptions {\n  CORRECT_NAME = 'correct-name',\n  CORRECT_NAME_TO_NUMBER = 'correct-name-to-number',\n  CORRECT_NEW_NR = 'correct-new-nr'\n}\n","<template>\n  <v-form\n    id=\"correct-company-name-form\"\n    ref=\"form\"\n    v-model=\"formValid\"\n  >\n    <v-row no-gutters>\n      <v-col>\n        <v-text-field\n          id=\"company-name-textfield\"\n          v-model=\"textfield\"\n          class=\"mb-n3\"\n          filled\n          :rules=\"companyNameRules\"\n        />\n      </v-col>\n    </v-row>\n  </v-form>\n</template>\n\n<script lang=\"ts\">\nimport Vue from 'vue'\nimport { Component, Emit, Prop, Watch, Provide } from 'vue-property-decorator'\nimport { CorrectNameOptions } from '@bcrs-shared-components/enums'\nimport { VuetifyRuleFunction } from '@bcrs-shared-components/types'\n\n@Component({})\nexport default class CorrectCompanyName extends Vue {\n  // Refs\n  $refs: {\n    form: HTMLFormElement\n  }\n\n  @Prop({ required: true }) readonly companyName!: string\n  @Prop({ required: true }) readonly formType!: CorrectNameOptions\n  @Prop({ required: true }) readonly validate!: boolean\n\n  // Local properties\n  @Provide() formValid = false // initially invalid\n  @Provide() textfield = ''\n\n  // Rules\n  get companyNameRules (): Array<VuetifyRuleFunction> {\n    return [\n      (v: string) => !!v || ' A company name is required',\n      (v: string) => (v !== this.companyName) || ' Enter a new company name'\n    ]\n  }\n\n  /** Watch for company name changed. */\n  @Watch('companyName', { immediate: true })\n  onCompanyNameChanged (val: string) {\n    this.textfield = val\n  }\n\n  /** Watch for form submission and emit results. */\n  @Watch('formType')\n  private onSubmit (): void {\n    // process only when current form type matches\n    if (this.formType === CorrectNameOptions.CORRECT_NAME) {\n      // emit new data\n      this.emitCompanyName(this.textfield)\n      this.emitSaved(true)\n    }\n  }\n\n  /** Validate or reset validation when parent tells us. */\n  @Watch('validate')\n  private onValidate (val: boolean): void {\n    if (val) this.$refs.form.validate()\n    else this.$refs.form.resetValidation()\n  }\n\n  /** Watch for changes and inform parent when form/component is valid. */\n  @Watch('formValid')\n  @Emit('valid')\n  private emitValid (): boolean {\n    return this.formValid\n  }\n\n  /** Inform parent that the process is complete. */\n  @Emit('saved')\n  private emitSaved (val: boolean): void {}\n\n  /** Inform parent of updated company name. */\n  @Emit('update:companyName')\n  private emitCompanyName (name: string): void {}\n}\n</script>\n","<template>\n  <v-form\n    id=\"correct-name-to-number-form\"\n    ref=\"form\"\n    v-model=\"formValid\"\n  >\n    <v-row no-gutters>\n      <v-col>\n        <v-checkbox\n          id=\"correct-name-to-number-checkbox\"\n          v-model=\"checkbox\"\n          class=\"mb-n5\"\n          :label=\"`Change the company name to ${numberedName}`\"\n          :rules=\"[(v) => v]\"\n        />\n      </v-col>\n    </v-row>\n  </v-form>\n</template>\n\n<script lang=\"ts\">\nimport Vue from 'vue'\nimport { Component, Prop, Watch, Emit } from 'vue-property-decorator'\nimport { CorrectNameOptions } from '@bcrs-shared-components/enums'\nimport { CorpTypeCd } from '@bcrs-shared-components/corp-type-module'\n\n@Component({})\nexport default class CorrectNameToNumber extends Vue {\n  // Refs\n  $refs: {\n    form: HTMLFormElement\n  }\n\n  @Prop({ required: true }) readonly businessId!: string\n  @Prop({ required: true }) readonly entityType!: CorpTypeCd\n  @Prop({ required: true }) readonly formType!: CorrectNameOptions\n  @Prop({ required: true }) readonly validate!: boolean\n\n  checkbox = false\n  formValid = false // initially invalid\n\n  /** The business' numbered name. */\n  get numberedName (): string {\n    const id = this.businessId?.substring(2) || 'Unknown'\n\n    switch (this.entityType) {\n      case CorpTypeCd.BC_ULC_COMPANY:\n        return `${id} B.C. UNLIMITED LIABILITY COMPANY`\n      case CorpTypeCd.BC_CCC:\n        return `${id} B.C. COMMUNITY CONTRIBUTION COMPANY LTD.`\n      default:\n        return `${id} B.C. LTD.`\n    }\n  }\n\n  /** Watch for form submission and emit results. */\n  @Watch('formType')\n  private onSubmit (): void {\n    // process only when current form type matches\n    if (this.formType === CorrectNameOptions.CORRECT_NAME_TO_NUMBER) {\n      // emit new data\n      this.emitCompanyName(this.numberedName)\n      this.emitSaved(true)\n    }\n  }\n\n  /** Validate or reset validation when parent tells us. */\n  @Watch('validate')\n  private onValidate (val: boolean): void {\n    if (val) this.$refs.form.validate()\n    else this.$refs.form.resetValidation()\n  }\n\n  /** Watch for changes and inform parent when form/component is valid. */\n  @Watch('formValid')\n  @Emit('valid')\n  private emitValid (): boolean {\n    return this.formValid\n  }\n\n  /** Inform parent that the process is complete. */\n  @Emit('saved')\n  private emitSaved (val: boolean): void {}\n\n  /** Inform parent of updated company name. */\n  @Emit('update:companyName')\n  private emitCompanyName (name: string): void {}\n}\n</script>\n\n<style lang=\"scss\" scoped>\n@import '@/assets/styles/theme.scss';\n\n.v-input--selection-controls {\n  padding: 0;\n  margin: 0;\n}\n\n:deep(.theme--light.v-label) {\n  font-size: 1rem;\n  color: $gray7;\n  font-weight: normal;\n}\n</style>\n","<template>\n  <v-form\n    id=\"correct-name-request-form\"\n    ref=\"form\"\n    v-model=\"formValid\"\n    lazy-validation\n  >\n    <ConfirmDialogShared\n      ref=\"confirm\"\n      attach=\"#app\"\n    />\n\n    <v-row no-gutters>\n      <v-col\n        cols=\"1\"\n        class=\"mt-3\"\n      >\n        <v-chip\n          outlined\n          class=\"step-icon\"\n        >\n          1\n        </v-chip>\n      </v-col>\n      <v-col>\n        <v-text-field\n          id=\"nr-number\"\n          v-model=\"nrNumber\"\n          filled\n          persistent-hint\n          class=\"text-input-field\"\n          label=\"Enter the NR Number\"\n          hint=\"Example: NR 1234567\"\n          :rules=\"nrNumRules\"\n          @keyup=\"nrNumber = nrNumber.toUpperCase()\"\n        />\n      </v-col>\n    </v-row>\n\n    <v-row\n      no-gutters\n      class=\"mt-4 mb-n1\"\n    >\n      <v-col\n        cols=\"1\"\n        class=\"mt-3\"\n      >\n        <v-chip\n          outlined\n          class=\"step-icon\"\n        >\n          2\n        </v-chip>\n      </v-col>\n      <v-col cols=\"5\">\n        <v-text-field\n          id=\"applicant-phone\"\n          v-model=\"applicantPhone\"\n          filled\n          persistent-hint\n          class=\"text-input-field\"\n          label=\"Applicant's Phone Number\"\n          hint=\"Example: 555-555-5555\"\n          type=\"tel\"\n          :rules=\"phoneRules\"\n        />\n      </v-col>\n      <div class=\"ma-5\">\n        or\n      </div>\n      <v-col>\n        <v-text-field\n          id=\"applicant-email\"\n          v-model=\"applicantEmail\"\n          filled\n          persistent-hint\n          class=\"text-input-field\"\n          label=\"Applicant's Notification Email\"\n          hint=\"Example: name@email.com\"\n          type=\"email\"\n          :rules=\"emailRules\"\n        />\n      </v-col>\n    </v-row>\n  </v-form>\n</template>\n\n<script lang=\"ts\">\nimport { Component, Emit, Mixins, Prop, Watch } from 'vue-property-decorator'\nimport { ConfirmDialog as ConfirmDialogShared } from '@bcrs-shared-components/confirm-dialog'\nimport { NameRequestMixin } from '@bcrs-shared-components/mixins'\nimport { ConfirmDialogType, NameRequestIF } from '@bcrs-shared-components/interfaces'\nimport { CorrectNameOptions } from '@bcrs-shared-components/enums'\nimport { CorpTypeCd, GetCorpFullDescription } from '@bcrs-shared-components/corp-type-module'\n\n@Component({\n  components: {\n    ConfirmDialogShared\n  }\n})\nexport default class CorrectNameRequest extends Mixins(NameRequestMixin) {\n  // Refs\n  $refs!: {\n    confirm: ConfirmDialogType\n    form: HTMLFormElement\n  }\n\n  @Prop({ required: true }) readonly businessId!: string\n  @Prop({ required: true }) readonly entityType!: CorpTypeCd\n  @Prop({ required: true }) readonly fetchAndValidateNr!: (...args) => Promise<NameRequestIF>\n  @Prop({ required: true }) readonly formType!: CorrectNameOptions\n  @Prop({ required: true }) readonly nameRequest!: NameRequestIF\n  @Prop({ required: true }) readonly validate!: boolean\n\n  // Local properties\n  applicantEmail = ''\n  applicantPhone = ''\n  formValid = false // initially invalid\n  nrNumber = ''\n\n  // Validation rules\n  readonly nrNumRules = [\n    (v: string) => !!v || 'Name Request Number is required',\n    (v: string) => this.isValidNrNumber(v) || 'Name Request Number is invalid'\n  ]\n  readonly phoneRules = [\n    (v: string) => !/^\\s/g.test(v) || 'Invalid spaces', // leading spaces\n    (v: string) => !/\\s$/g.test(v) || 'Invalid spaces', // trailing spaces\n    (v: string) => !(v?.length > 12) || 'Phone number is invalid'\n  ]\n  readonly emailRules = [\n    (v: string) => !/^\\s/g.test(v) || 'Invalid spaces', // leading spaces\n    (v: string) => !/\\s$/g.test(v) || 'Invalid spaces', // trailing spaces\n    (v: string) => this.isValidEmail(v) || 'Email is invalid'\n  ]\n\n  /** Whether this component is valid. */\n  get componentValid (): boolean {\n    // 1. rules are valid\n    // 2. we have a NR number\n    // 3. we have either a phone number or an email\n    return (\n      this.formValid &&\n      !!this.nrNumber &&\n      (!!this.applicantPhone || !!this.applicantEmail)\n    )\n  }\n\n  /** Returns true if NR number is valid. */\n  private isValidNrNumber (value: string): boolean {\n    const VALID_FORMAT = new RegExp(/^(NR )\\d{7}$/)\n    return VALID_FORMAT.test(value)\n  }\n\n  /** Returns true if email is valid. */\n  private isValidEmail (value: string): boolean {\n    // don't validate empty value\n    if (value?.length < 1) return true\n\n    // if we have a phone number then email is optional\n    if (!!this.applicantPhone && !!value) return true\n\n    // check email format\n    // eslint-disable-next-line max-len\n    const VALID_FORMAT = new RegExp(/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/)\n    return VALID_FORMAT.test(value)\n  }\n\n  /** Watch for form submission and emit results. */\n  @Watch('formType')\n  private async onSubmit (): Promise<any> {\n    // process only when current form type matches\n    if (this.formType === CorrectNameOptions.CORRECT_NEW_NR) {\n      try {\n        // validate and return the name request data\n        const nr = await this.fetchAndValidateNr(this.nrNumber, this.businessId, this.applicantPhone,\n          this.applicantEmail)\n\n        if (this.entityType !== nr.legalType) {\n          // invalid NR type - inform parent the process is done and show dialog\n          this.$refs.form.resetValidation()\n          this.emitSaved(false)\n\n          const nrFullDescription = GetCorpFullDescription(nr.legalType)\n          const entityFullDescription = GetCorpFullDescription(this.entityType)\n          const dialogContent = `<p class=\"info-text\">This ${nrFullDescription} Name Request ` +\n            `does not match the current business type <b>${entityFullDescription}</b>.\\n\\n` +\n            `The Name Request type must match the business type before you can continue.</p>`\n          await this.showConfirmDialog(\n            this.$refs.confirm,\n            'Name Request Type Does Not Match Business Type',\n            dialogContent\n          )\n        } else {\n          // emit new data\n          this.emitNameRequest(nr)\n          this.emitCompanyName(this.getNrApprovedName(nr))\n          this.emitSaved(true)\n        }\n      } catch (error) {\n        alert((error as any).message)\n\n        // inform parent that process is complete\n        this.$refs.form.resetValidation()\n        this.emitSaved(false)\n      }\n    }\n  }\n\n  /** Validate or reset validation when parent tells us. */\n  @Watch('validate')\n  private onValidate (val: boolean): void {\n    if (val) this.$refs.form.validate()\n    else this.$refs.form.resetValidation()\n  }\n\n  /** Watch for changes and inform parent when component is valid. */\n  @Watch('componentValid')\n  @Emit('valid')\n  private emitValid (): boolean {\n    return this.componentValid\n  }\n\n  /** Inform parent that the process is complete. */\n  @Emit('saved')\n  private emitSaved (val: boolean): void {}\n\n  /** Inform parent of updated company name. */\n  @Emit('update:companyName')\n  private emitCompanyName (name: string): void {}\n\n  /** Inform parent of updated name request object. */\n  @Emit('update:nameRequest')\n  private emitNameRequest (nameRequest: NameRequestIF): void {}\n\n  /**\n   * Helper to show the confirm dialogs.\n   * @param ref The dialog reference\n   * @param title The title content in dialog header\n   * @param message The content body\n   * */\n  private async showConfirmDialog (ref: ConfirmDialogType, title: string, message: string):\n    Promise<boolean> {\n    return ref.open(title, message, {\n      width: '45rem',\n      persistent: true,\n      yes: 'OK',\n      no: null,\n      cancel: null\n    }).catch(() => false)\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n@import '@/assets/styles/theme.scss';\n\n.step-icon {\n  border-color: $gray9;\n  font-weight: bold;\n  pointer-events: none;\n}\n\n// hide uppercase transformation delay from user\n:deep(#nr-number) {\n  text-transform: uppercase;\n}\n\n:deep(.theme--light.v-label) {\n  font-size: 1rem;\n  color: $gray7;\n  font-weight: normal;\n}\n</style>\n","<template>\n  <v-container\n    id=\"correct-name-options\"\n    class=\"pa-0 pr-4\"\n  >\n    <p\n      v-if=\"!isOneOption\"\n      class=\"info-text mb-5 pb-5 bottom-border\"\n    >\n      You can {{ actionTxt || 'correct the company name' }} in one of the following ways:\n    </p>\n\n    <v-expansion-panels\n      v-model=\"panel\"\n      class=\"bottom-border\"\n      accordion\n    >\n      <v-expansion-panel\n        v-for=\"(item,i) in displayedOptions\"\n        :id=\"`x-panel-${item.id}`\"\n        :key=\"i\"\n        class=\"mb-4\"\n        :disabled=\"isOneOption\"\n        @click=\"identifyForm(item.id)\"\n      >\n        <v-expansion-panel-header :class=\"{'name-options-header': isOneOption}\">\n          <span class=\"names-option-title\">{{ item.title }}</span>\n          <template #actions>\n            <v-icon color=\"primary\">\n              mdi-menu-down\n            </v-icon>\n          </template>\n        </v-expansion-panel-header>\n\n        <v-expansion-panel-content class=\"name-options-content pt-4\">\n          <div\n            v-if=\"item.description\"\n            class=\"info-text mb-4\"\n            color=\"primary\"\n          >\n            {{ item.description }}\n          </div>\n          <component\n            :is=\"item.component\"\n            :key=\"item.id\"\n            :businessId=\"businessId\"\n            :companyName=\"companyName\"\n            :entityType=\"entityType\"\n            :fetchAndValidateNr=\"fetchAndValidateNr\"\n            :formType=\"formType\"\n            :nameRequest=\"nameRequest\"\n            :validate=\"validate\"\n            @saved=\"emitSaved($event)\"\n            @update:nameRequest=\"emitNameRequest($event)\"\n            @update:companyName=\"emitCompanyName($event)\"\n            @valid=\"isSubComponentValid = $event\"\n          />\n        </v-expansion-panel-content>\n      </v-expansion-panel>\n    </v-expansion-panels>\n\n    <div class=\"action-btns\">\n      <v-btn\n        id=\"done-btn\"\n        large\n        color=\"primary\"\n        :loading=\"isLoading\"\n        @click=\"submitNameCorrection()\"\n      >\n        <span>Done</span>\n      </v-btn>\n\n      <v-btn\n        id=\"cancel-btn\"\n        large\n        outlined\n        color=\"primary\"\n        @click=\"emitCancel()\"\n      >\n        <span>Cancel</span>\n      </v-btn>\n    </div>\n  </v-container>\n</template>\n\n<script lang=\"ts\">\nimport Vue from 'vue'\nimport { Component, Emit, Prop } from 'vue-property-decorator'\nimport { NameRequestIF } from '@bcrs-shared-components/interfaces'\nimport { CorrectNameOptions } from '@bcrs-shared-components/enums'\nimport { CorpTypeCd } from '@bcrs-shared-components/corp-type-module'\nimport CorrectCompanyName from './CorrectCompanyName.vue'\nimport CorrectNameToNumber from './CorrectNameToNumber.vue'\nimport CorrectNameRequest from './CorrectNameRequest.vue'\n\ninterface CorrectNameOptionIF {\n  id: CorrectNameOptions,\n  title: string,\n  description?: string,\n  component: any\n}\n\n/**\n * Operation:\n * 1. To initialize this component option list, pass in an array of id's of the components you want to display.\n *    I.e., ['correct-new-nr', 'correct-name', 'correct-name-to-number']\n * 2. If this options list is only passed one value the option panel will be open by default.\n * 3. The parent component will have to watch for the 'save' and 'cancel' events and handle them accordingly.\n */\n@Component({\n  components: {\n    CorrectCompanyName,\n    CorrectNameToNumber,\n    CorrectNameRequest\n  }\n})\nexport default class CorrectName extends Vue {\n  @Prop({ default: null }) readonly actionTxt!: string\n  @Prop({ required: true }) readonly businessId!: string\n  @Prop({ required: true }) readonly companyName!: string\n  @Prop({ default: () => [] }) readonly correctionNameChoices!: Array<CorrectNameOptions>\n  @Prop({ required: true }) readonly entityType!: CorpTypeCd\n  @Prop({ required: true }) readonly fetchAndValidateNr!: () => Promise<NameRequestIF>\n  @Prop({ required: true }) readonly formType!: CorrectNameOptions\n  @Prop({ required: true }) readonly nameRequest!: NameRequestIF\n\n  // local properties\n  protected displayedOptions: Array<CorrectNameOptionIF> = []\n  protected panel: number = null\n  protected currentFormType: CorrectNameOptions = null\n  protected isLoading = false\n  protected isSubComponentValid = false\n  protected validate = false // don't validate initially\n\n  readonly correctionNameOptions: Array<CorrectNameOptionIF> = [\n    {\n      id: CorrectNameOptions.CORRECT_NAME,\n      title: 'Edit the company name',\n      description: 'Correct typographical errors in the existing company name.',\n      component: CorrectCompanyName\n    },\n    {\n      id: CorrectNameOptions.CORRECT_NAME_TO_NUMBER,\n      title: 'Use the incorporation number as the name',\n      description: null,\n      component: CorrectNameToNumber\n    },\n    {\n      id: CorrectNameOptions.CORRECT_NEW_NR,\n      title: 'Use a new name request number',\n      description: 'Enter the new Name Request Number (e.g., NR 1234567) and either the applicant phone number ' +\n        'OR the applicant email that was used when the name was requested.',\n      component: CorrectNameRequest\n    }\n  ]\n\n  /** Called when component is mounted. */\n  mounted (): void {\n    // Filter the options to be displayed by what id's were passed from the parent component\n    this.displayedOptions = this.correctionNameOptions.filter(\n      option => this.correctionNameChoices.includes(option.id)\n    )\n    // open by default and assign id if only 1 option\n    if (this.isOneOption) {\n      this.panel = 0\n      this.currentFormType = this.displayedOptions[0].id\n    }\n  }\n\n  /** True if only one correction name choice is configured. */\n  get isOneOption (): boolean {\n    return (this.correctionNameChoices.length === 1)\n  }\n\n  /** When Done button is clicked, triggers form submission. */\n  protected submitNameCorrection (): void {\n    if (this.isSubComponentValid) {\n      this.isLoading = true\n      this.emitFormType(this.currentFormType)\n      // disable validation for next time\n      this.validate = false\n    } else {\n      // tell sub-component to validate\n      this.validate = true\n    }\n  }\n\n  /** When a panel is expanded, identifies the selected form. */\n  protected identifyForm (type: CorrectNameOptions) {\n    this.currentFormType = type\n    this.isSubComponentValid = false\n  }\n\n  /** When Cancel button is clicked, informs parent that name correction is cancelled. */\n  @Emit('cancel')\n  protected emitCancel (): void {\n    // first disable validation, then clear current panel\n    this.validate = false\n    this.panel = null\n  }\n\n  /** Inform parent that name correction process is done. */\n  @Emit('saved')\n  protected emitSaved (saved: boolean): boolean {\n    this.isLoading = false\n    this.emitFormType(null)\n    if (saved) this.panel = null\n    return saved\n  }\n\n  /** Inform parent of updated company name. */\n  @Emit('update:companyName')\n  private emitCompanyName (name: string): void {}\n\n  /** Inform parent of updated form type. */\n  @Emit('update:formType')\n  private emitFormType (formType: CorrectNameOptions): void {}\n\n  /** Inform parent of updated name request object. */\n  @Emit('update:nameRequest')\n  private emitNameRequest (nameRequest: NameRequestIF): void {}\n}\n</script>\n\n<style lang=\"scss\" scoped>\n@import '@/assets/styles/theme.scss';\n\n.name-options-header {\n  align-items: start;\n}\n\n.bottom-border {\n  border-color: rgba(0, 0, 0, 0.1) !important;\n  border-bottom: 1px solid;\n}\n\n.v-expansion-panel:not(:first-child) {\n  padding-top: 1.25rem;\n}\n\n.names-option-title {\n  font-size: 1rem;\n  color: $app-blue;\n}\n\n.v-expansion-panel-content {\n  :deep(.v-expansion-panel-content__wrap) {\n    padding: 0;\n  }\n}\n\n.v-expansion-panel-header {\n  padding: .25rem 0 0;\n  color: $app-blue;\n}\n\n.v-expansion-panel--active > .v-expansion-panel-header {\n  font-weight: bold;\n  min-height: 3rem;\n\n  .names-option-title {\n    color: $gray9 !important;\n  }\n}\n\n.action-btns {\n  margin-top: 30px;\n  display: flex;\n  justify-content: flex-end;\n\n  .v-btn + .v-btn {\n    margin-left: 0.5rem;\n  }\n\n  .v-btn {\n    min-width: 6.5rem;\n  }\n\n  #done-btn[disabled] {\n    color: white !important;\n    background-color: $app-blue !important;\n    opacity: 0.2;\n  }\n}\n</style>\n"],"names":["needToProduceProvide","original","produceProvide","provide","_this","rv","reactiveInjectKey","i","_loop_1","this_1","inheritInjected","componentOptions","Provide","key","createDecorator","k","CorrectNameOptions","CorrectCompanyName","Vue","__publicField","v","val","name","__decorateClass","Prop","Watch","Emit","Component","CorrectNameToNumber","id","_a","CorpTypeCd","CorrectNameRequest","Mixins","NameRequestMixin","value","nr","nrFullDescription","GetCorpFullDescription","entityFullDescription","dialogContent","error","nameRequest","ref","title","message","ConfirmDialogShared","CorrectName","option","type","saved","formType"],"mappings":"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","x_google_ignoreList":[0,1]}