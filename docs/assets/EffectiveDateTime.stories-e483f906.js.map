{"version":3,"file":"EffectiveDateTime.stories-e483f906.js","sources":["../../src/enums/effective-date-types.ts","../../src/components/effective-date-time/EffectiveDateTime.vue"],"sourcesContent":["export enum EffectiveDateTypes {\n  FUTURE_EFFECTIVE = 'futureEffective',\n  IMMEDIATE = 'immediate'\n}\n","<template>\n  <v-card\n    id=\"effective-date-time-box\"\n    flat\n  >\n    <v-radio-group\n      v-model=\"effectiveDateType\"\n      column\n      class=\"pt-0 mt-0\"\n    >\n      <v-radio\n        label=\"Immediate (date and time of filing)\"\n        :value=\"EffectiveDateTypes.IMMEDIATE\"\n      />\n      <v-radio\n        label=\"A date and time in the future\"\n        :value=\"EffectiveDateTypes.FUTURE_EFFECTIVE\"\n      />\n    </v-radio-group>\n\n    <v-form\n      ref=\"form\"\n      class=\"date-time-selectors\"\n    >\n      <DatePicker\n        ref=\"datePickerRef\"\n        title=\"Date\"\n        nudge-right=\"40\"\n        :inputRules=\"dateRules\"\n        :disablePicker=\"effectiveDateType !== EffectiveDateTypes.FUTURE_EFFECTIVE\"\n        :minDate=\"dateToYyyyMmDd(minDate)\"\n        :maxDate=\"dateToYyyyMmDd(maxDate)\"\n        @emitDate=\"dateText = $event\"\n        @emitCancel=\"dateText = ''\"\n      />\n\n      <v-row>\n        <v-col\n          cols=\"12\"\n          sm=\"6\"\n          md=\"3\"\n        >\n          <v-combobox\n            id=\"hour-selector\"\n            ref=\"hourSelector\"\n            v-model=\"selectHour\"\n            filled\n            class=\"mr-1\"\n            label=\"Hour\"\n            :items=\"hours\"\n            :disabled=\"!isFutureEffective\"\n            :rules=\"hourRules\"\n          />\n        </v-col>\n        <span\n          class=\"time-colon\"\n          :class=\"{ 'disabled': !isFutureEffective }\"\n        >:</span>\n        <v-col\n          cols=\"12\"\n          sm=\"6\"\n          md=\"3\"\n        >\n          <v-combobox\n            id=\"minute-selector\"\n            ref=\"minuteSelector\"\n            v-model=\"selectMinute\"\n            filled\n            class=\"ml-1\"\n            label=\"Minute\"\n            :items=\"minutes\"\n            :disabled=\"!isFutureEffective\"\n            :rules=\"minuteRules\"\n          />\n        </v-col>\n        <v-col\n          cols=\"12\"\n          sm=\"6\"\n          md=\"3\"\n        >\n          <v-select\n            id=\"period-selector\"\n            v-model=\"selectPeriod\"\n            filled\n            :items=\"timePeriod\"\n            :disabled=\"!isFutureEffective\"\n          />\n        </v-col>\n        <v-col\n          cols=\"12\"\n          sm=\"6\"\n          md=\"3\"\n          class=\"label-col\"\n        >\n          <span\n            class=\"time-zone-label\"\n            :class=\"{ 'disabled': !isFutureEffective }\"\n          >Pacific time</span>\n        </v-col>\n      </v-row>\n\n      <!-- display validation alert only after date and time have been entered -->\n      <v-row v-if=\"isFutureEffective && dateText && (selectHour.length > 0) && (selectMinute.length > 0)\">\n        <v-col class=\"validation-alert\">\n          <p\n            v-if=\"isUnderTime\"\n            class=\"validation-alert-msg\"\n          >\n            The time must be at least {{ dateToPacificTime(minDate) }} for the selected date\n          </p>\n          <p\n            v-if=\"isOverTime\"\n            class=\"validation-alert-msg\"\n          >\n            The time must be at most {{ dateToPacificTime(maxDate) }} for the selected date\n          </p>\n        </v-col>\n      </v-row>\n    </v-form>\n  </v-card>\n</template>\n\n<script lang=\"ts\">\nimport Vue from 'vue'\nimport { Component, Emit, Mixins, Prop, Watch } from 'vue-property-decorator'\nimport { DatePicker } from '@bcrs-shared-components/date-picker'\nimport { DateMixin } from '@/mixins' // NB: local mixin (StoryBook can't find it otherwise)\nimport { EffectiveDateTypes } from '@bcrs-shared-components/enums'\nimport { EffectiveDateTimeIF, FormFieldType, FormIF } from '@bcrs-shared-components/interfaces'\n\nenum PeriodTypes {\n  AM = 'am',\n  PM = 'pm'\n}\n\n@Component({\n  components: {\n    DatePicker\n  }\n})\nexport default class EffectiveDateTime extends Mixins(DateMixin) {\n  readonly MIN_DIFF_MINUTES = 3\n  readonly MAX_DIFF_DAYS = 10\n\n  // Add element types to refs\n  $refs!: {\n    form: FormIF,\n    datePickerRef: any, // should be DatePicker but TS complains\n    hourSelector: FormFieldType, // used in unit tests\n    minuteSelector: FormFieldType // used in unit tests\n  }\n\n  /** Whether to parse the initial effective date-time into the controls. */\n  @Prop({ default: false }) readonly parseInitial!: boolean\n\n  /** Current JS date, expected to be passed in periodically. */\n  @Prop() readonly currentJsDate!: Date\n\n  /** Effective Date Time object, for initial config. */\n  @Prop() readonly effectiveDateTime!: EffectiveDateTimeIF\n\n  /** Whether to perform validation. */\n  @Prop() readonly isAppValidate!: boolean\n\n  // Declaration for template\n  readonly EffectiveDateTypes = EffectiveDateTypes\n\n  /** Whether Is Immediate is selected. */\n  private isImmediate = false\n\n  /** Whether Is Future Effective is selected. */\n  private isFutureEffective = false\n\n  /** The minimum date that can be entered (ie, now + 3 minutes). */\n  private minDate: Date = null\n\n  /** The maximum date that can be entered (ie, 10 days from now). */\n  private maxDate: Date = null\n\n  // V-model values\n  private effectiveDateType: EffectiveDateTypes = null\n  private datePicker = ''\n  private dateText = ''\n  private selectHour: string[] = []\n  private selectMinute: string[] = []\n  private selectPeriod = PeriodTypes.AM\n\n  // Combobox items\n  private hours = [...Array(12).keys()].map(num => (num + 1).toString())\n  private minutes = [...Array(60).keys()].map(num => num.toString().padStart(2, '0'))\n  private timePeriod = [PeriodTypes.AM, PeriodTypes.PM]\n\n  /** Validations rules for date text field. */\n  get dateRules (): Array<(v) => boolean | string> {\n    // only apply rules when Future Effective is selected\n    if (this.isFutureEffective && this.isAppValidate) {\n      const minDateStr = this.dateToPacificDate(this.minDate, true)\n      const maxDateStr = this.dateToPacificDate(this.maxDate, true)\n      return [\n        (v: string) => !!v || 'Select date',\n        (v: string) => this.isValidDateRange(v) || `Date must be between ${minDateStr} and ${maxDateStr}`\n      ]\n    }\n    return []\n  }\n\n  /**\n   * True if date is >= the minimum (ie, today) and <= the maximum (ie, the 10th day).\n   * This is used for Vue form validation (in Date Rules above).\n   */\n  private isValidDateRange (v: string): boolean {\n    let date = new Date(v)\n    // only compare year/month/day (ignore time)\n    date = new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate())\n    const minDay = new Date(this.minDate.getFullYear(), this.minDate.getMonth(), this.minDate.getDate())\n    const maxDay = new Date(this.maxDate.getFullYear(), this.maxDate.getMonth(), this.maxDate.getDate())\n    return (date >= minDay && date <= maxDay)\n  }\n\n  /** Validations rules for hour selector. */\n  get hourRules (): Array<(v) => boolean | string> {\n    // only apply rules when Future Effective is selected\n    if (this.isFutureEffective && this.isAppValidate) {\n      return [\n        (v: string[]) => (v.length > 0) || 'Select hour',\n        (v: string) => (/^([1-9]|1[012])$/.test(v)) || ''\n      ]\n    }\n    return []\n  }\n\n  /** Validations rules for minute selector. */\n  get minuteRules (): Array<(v) => boolean | string> {\n    // only apply rules when Future Effective is selected\n    if (this.isFutureEffective && this.isAppValidate) {\n      return [\n        (v: string[]) => (v.length > 0) || 'Select minute',\n        (v: string) => (/^([0-5]?[0-9])$/.test(v)) || ''\n      ]\n    }\n    return []\n  }\n\n  /**\n   * True if time is under the minimum (ie, for today).\n   * This is a non-form validation - it needs to be checked for overall component validity.\n   */\n  get isUnderTime (): boolean {\n    if (this.effectiveDateTime.effectiveDate) {\n      const date = new Date(this.effectiveDateTime.effectiveDate)\n      // use max seconds and milliseconds for comparison\n      date.setSeconds(59, 999)\n      return (date.getTime() < this.minDate.getTime())\n    }\n    return false\n  }\n\n  /**\n   * True if time is over the maximum (ie, for 10th day).\n   * This is a non-form validation - it needs to be checked for overall component validity.\n   */\n  get isOverTime (): boolean {\n    if (this.effectiveDateTime.effectiveDate) {\n      const date = new Date(this.effectiveDateTime.effectiveDate)\n      // use min seconds and milliseconds for comparison\n      date.setSeconds(0, 0)\n      return (date.getTime() > this.maxDate.getTime())\n    }\n    return false\n  }\n\n  /** Called when component is mounted. */\n  mounted (): void {\n    if (this.parseInitial) this.parseInitialEffectiveDateTime()\n  }\n\n  /** Parses initial Effective Date Time and sets state. */\n  private parseInitialEffectiveDateTime (): void {\n    // set the chosen effective date option\n    this.isFutureEffective = this.effectiveDateTime.isFutureEffective\n    if (this.isFutureEffective === true) {\n      this.effectiveDateType = EffectiveDateTypes.FUTURE_EFFECTIVE\n    } else if (this.isFutureEffective === false) {\n      this.effectiveDateType = EffectiveDateTypes.IMMEDIATE\n    } else {\n      this.effectiveDateType = null\n    }\n\n    // try to create Date object\n    const effectiveDate = this.effectiveDateTime.effectiveDate\n    const date = effectiveDate && new Date(effectiveDate)\n\n    if (date) {\n      // set model properties\n      let hour = date.getHours()\n      const minute = date.getMinutes()\n      const period = hour < 12 ? PeriodTypes.AM : PeriodTypes.PM\n\n      // convert 24h -> 12h and 0h -> 12h\n      if (hour > 12) {\n        hour -= 12\n      } else if (hour === 0) {\n        hour = 12\n      }\n\n      // set model values\n      this.dateText = this.dateToYyyyMmDd(date)\n      this.selectHour = [hour.toString()]\n      this.selectMinute = [minute.toString().padStart(2, '0')]\n      this.selectPeriod = period\n    }\n  }\n\n  /** Constructs the effective date and updates the parent. */\n  private async constructAndUpdate (): Promise<void> {\n    // wait for form to update itself before checking validity\n    await Vue.nextTick()\n\n    const isDateValid = this.$refs.datePickerRef.validateForm()\n    const isTimeValid = this.$refs.form.validate()\n    if (isDateValid && isTimeValid && !!this.selectHour.length && !!this.selectMinute.length) {\n      const year = +this.dateText.slice(0, 4)\n      const month = (+this.dateText.slice(5, 7) - 1) // zero-relative\n      const date = +this.dateText.slice(8, 10)\n      let hours = +this.selectHour\n      const minutes = +this.selectMinute\n\n      // convert 12 am -> 0\n      if (this.selectPeriod === PeriodTypes.AM && +this.selectHour === 12) {\n        hours = 0\n      }\n\n      // convert 1-11 pm -> 13-23\n      if (this.selectPeriod === PeriodTypes.PM && +this.selectHour !== 12) {\n        hours += 12\n      }\n\n      // construct date in UTC using parameters in Pacific time\n      const dateTime = this.createUtcDate(year, month, date, hours, minutes)\n\n      // Set Effective Date\n      this.emitEffectiveDate(dateTime)\n    }\n\n    // update validity every time\n    this.emitValid()\n  }\n\n  @Watch('currentJsDate', { immediate: true })\n  onCurrentJsDateChanged (val: Date) {\n    // safety check (val may be null)\n    if (val) {\n      // set new min date\n      const minDate = new Date()\n      // add 3 minutes\n      minDate.setTime(val.getTime() + this.MIN_DIFF_MINUTES * 60 * 1000)\n      this.minDate = minDate\n\n      // set new max date\n      const maxDate = new Date()\n      // add 10 days\n      maxDate.setTime(val.getTime() + this.MAX_DIFF_DAYS * 24 * 60 * 60 * 1000)\n      this.maxDate = maxDate\n\n      // check if form is still valid\n      this.emitValid()\n    }\n  }\n\n  @Watch('datePicker')\n  onDatePickerChanged (val: string): void {\n    this.dateText = val\n    // the watcher for dateText will fire next\n  }\n\n  @Watch('dateText')\n  onDateTextChanged (val: string): void {\n    if (this.isFutureEffective) {\n      this.constructAndUpdate()\n    }\n  }\n\n  @Watch('selectHour')\n  onSelectHourChanged (val: string): void {\n    if (this.isFutureEffective) {\n      this.constructAndUpdate()\n    }\n  }\n\n  @Watch('selectMinute')\n  onSelectMinuteChanged (val: string): void {\n    if (this.isFutureEffective) {\n      this.constructAndUpdate()\n    }\n  }\n\n  @Watch('selectPeriod')\n  onSelectPeriodChanged (val: string): void {\n    if (this.isFutureEffective) {\n      this.constructAndUpdate()\n    }\n  }\n\n  @Watch('effectiveDateType')\n  onEffectiveDateTypeChanged (val: EffectiveDateTypes): void {\n    this.isImmediate = (val === EffectiveDateTypes.IMMEDIATE)\n    this.isFutureEffective = (val === EffectiveDateTypes.FUTURE_EFFECTIVE)\n\n    // if we changed to IMMEDIATE then clear the model values (otherwise retain them)\n    if (this.isImmediate) {\n      this.datePicker = ''\n      this.dateText = ''\n      this.selectHour = []\n      this.selectMinute = []\n      this.selectPeriod = PeriodTypes.AM\n      this.$refs.datePickerRef.clearDate()\n    }\n\n    // update the parent\n    this.emitIsFutureEffective(this.isFutureEffective)\n    this.emitEffectiveDate(null)\n    this.emitValid()\n  }\n\n  @Emit('isFutureEffective')\n  private emitIsFutureEffective (val: boolean): void {}\n\n  @Emit('effectiveDate')\n  private emitEffectiveDate (val: Date): void {}\n\n  @Emit('valid')\n  private async emitValid (): Promise<boolean> {\n    // localized dateText check for future effective selections\n    const validDateText = this.isFutureEffective ? !!this.dateText : true\n\n    // wait for form to update itself before checking validity\n    await Vue.nextTick()\n    const isDateValid = this.$refs.datePickerRef.validateForm()\n    const isTimeValid = this.$refs.form.validate()\n    return this.isImmediate || (!!this.effectiveDateType &&\n      isDateValid && isTimeValid &&\n      !!this.selectHour.length && !!this.selectMinute.length &&\n      !this.isUnderTime &&\n      !this.isOverTime &&\n      validDateText\n    )\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n@import '@/assets/styles/theme.scss';\n\n#effective-date-time-box {\n  padding: 2rem 2rem 0.5rem;\n  line-height: 1.2rem;\n}\n\n:deep(.v-label) {\n  color: $gray7;\n  font-weight: normal;\n}\n\n.v-radio {\n  padding-bottom: .5rem;\n}\n\n.date-time-selectors {\n  margin-left: 2rem;\n}\n\n.time-colon {\n  margin-left: -4px;\n  margin-right: -4px;\n  padding-top: 2rem;\n  font-size: 25px;\n}\n\n@media (max-width: 768px) {\n  .time-colon {\n    display: none;\n  }\n}\n\n.label-col {\n  position: relative;\n  align-self: center;\n}\n\n.time-zone-label {\n  position: absolute;\n  top: -10px;\n  color: $gray7;\n}\n\n.disabled {\n  color: $gray6;\n}\n\n.validation-alert {\n  position: relative;\n\n  .validation-alert-msg {\n    line-height: 12px;\n    position: absolute;\n    top: -2rem;\n    padding: 0 12px;\n    font-size: 12px;\n    font-weight: 500;\n    color: $BCgovInputError !important;\n  }\n}\n\n:deep() {\n  .v-icon.v-icon.v-icon--disabled {\n    color: $app-blue !important;\n  }\n  .v-input--is-disabled {\n    opacity: 0.4;\n  }\n  .v-input--is-disabled .v-input__control > .v-input__slot:before {\n    border-image: none;\n  }\n}\n</style>\n"],"names":["EffectiveDateTypes","EffectiveDateTime","Mixins","DateMixin","__publicField","num","minDateStr","maxDateStr","v","date","minDay","maxDay","effectiveDate","hour","minute","period","Vue","isDateValid","isTimeValid","year","month","hours","minutes","dateTime","val","minDate","maxDate","validDateText","__decorateClass","Prop","Watch","Emit","Component","DatePicker"],"mappings":"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"}