{"version":3,"file":"validation-mixin-e5d1d708.js","sources":["../../src/enums/name-request-codes.ts","../../src/enums/name-request-states.ts","../../src/mixins/date-mixin.ts","../../src/mixins/name-request-mixin.ts","../../src/mixins/countries-provinces-mixin.ts","../../src/mixins/validation-mixin.ts"],"sourcesContent":["//\n// Various codes found in NR objects.\n// (may be sorted by code)\n//\n\n// ref: https://github.com/bcgov/namex/blob/main/api/namex/constants/__init__.py\n// ref: https://github.com/bcgov/lear/blob/main/legal-api/src/legal_api/resources/v1/nr_type_map.py\nexport enum NrRequestTypeCodes {\n  // change name (or resubmit)\n  CHANGE_BEN = 'BEC',\n  CHANGE_CCC = 'CCC',\n  CHANGE_COOP = 'CCP',\n  CHANGE_CORP = 'CCR', // BC Limited\n  CHANGE_FIRM = 'CFR', // SP, DBA or GP\n  CHANGE_ULC = 'CUL',\n\n  // continuation in (move or resubmit)\n  CONTINUATION_IN_BEN = 'BECT',\n  CONTINUATION_IN_CCC = 'CCCT',\n  CONTINUATION_IN_COOP = 'CTC',\n  CONTINUATION_IN_CORP = 'CT',\n  CONTINUATION_IN_ULC = 'ULCT',\n\n  // convert (or resubmit)\n  CONVERT_BEN = 'BECV', // from LTD to BEN\n  CONVERT_CCC = 'CCV', // from LTD to CCC\n  CONVERT_CORP = 'BECR', // from BEN to LTD\n  CONVERT_ULBE = 'ULBE', // from ULC to BEN\n  CONVERT_ULC = 'UC', // from LTD to ULC\n  CONVERT_ULCB = 'ULCB', // from ULC to LTD\n\n  // new (or resubmit)\n  NEW_BC = 'BC', // BC Benefit Company Incorporation\n  NEW_CCC = 'CC', // CCC - Incorporation/Amalgamation\n  NEW_COOP = 'CP', // Cooperative - Incorporation/Amalgamation\n  NEW_CORP = 'CR', // BC Company - Incorporation/Amalgamation\n  NEW_FIRM = 'FR', // Sole Proprietorship/General Partnership/DBA - Registration\n  NEW_ULC = 'UL', // Unlimited Liability Company\n  NEW_XPRO_CORP = 'XCR', // Corporation (Foreign) - Extrapro Registration/Amalgamation\n\n  // restoration\n  RESTORATION_CCC = 'RCC',\n  RESTORATION_COOP = 'RCP',\n  RESTORATION_CORP = 'RCR', // BC Limited\n  RESTORATION_SOC = 'RSO',\n  RESTORATION_BEN = 'BERE',\n  RESTORATION_ULC = 'RUL',\n\n  // others, may be legacy or future\n  LC = 'LC', // new XPRO_LL_PARTNR\n  CLC = 'CLC', // change XPRO_LL_PARTNR\n  RLC = 'RLC', // restoration XPRO_LL_PARTNR\n  AL = 'AL', // assumed name XPRO_LL_PARTNR\n  LL = 'LL', // new LL_PARTNERSHIP\n  CLL = 'CLL', // change LL_PARTNERSHIP\n  XLL = 'XLL', // new XPRO_LL_PARTNR\n  XCLL = 'XCLL', // change XPRO_LL_PARTNR\n  LP = 'LP', // new LIM_PARTNERSHIP\n  CLP = 'CLP', // change LIM_PARTNERSHIP\n  SO = 'SO', // new SOCIETY\n  ASO = 'ASO', // amlagamate SOCIETY\n  CSO = 'CSO', // change SOCIETY\n  RSO = 'RSO', // restoration SOCIETY\n  CTSO = 'CTSO', // move SOCIETY\n  CSSO = 'CSSO', // convert SOCIETY\n  XSO = 'XSO', // new XPRO_SOCIETY\n  XCSO = 'XCSO', // change XPRO_SOCIETY\n  XRSO = 'XRSO', // restoration XPRO_SOCIETY\n  XASO = 'XASO', // assumed name XPRO_SOCIETY\n  XCASO = 'XCASO', // achg XPRO_SOCIETY\n  XCP = 'XCP', // new XPRO_COOP\n  XCCP = 'XCCP', // change XPRO_COOP\n  XRCP = 'XRCP', // restoration XPRO_COOP\n  FI = 'FI', // new FINANCIAL\n  CFI = 'CFI', // change FINANCIAL\n  RFI = 'RFI', // restoration FINANCIAL\n  PA = 'PA', // new PRIVATE_ACT\n  PAR = 'PAR', // new PARISHES\n  BEAM = 'BEAM', // amalgamate BCOMP\n}\n\nexport enum NrRequestActionCodes {\n  AMALGAMATE = 'AML',\n  ASSUMED = 'ASSUMED', // FUTURE: should be AS (as in LEAR)?\n  CHANGE_NAME = 'CHG',\n  CONVERSION = 'CNV', // aka Alteration\n  DBA = 'DBA', // doing business as\n  MOVE = 'MVE', // continuation in\n  NEW_BUSINESS = 'NEW', // incorporate or register\n  RESTORE = 'REH', // restore or reinstate\n  RENEW = 'REN', // restore with new name request\n  RESTORATION = 'REST', // FUTURE: unused? delete?\n  RESUBMIT = 'RESUBMIT', // FUTURE: unused? delete?\n\n  INFO = 'INFO' // special value for sub-menu\n}\n","export enum NameRequestStates {\n  // API STATES\n  APPROVED = 'APPROVED',\n  CANCELLED = 'CANCELLED',\n  COMPLETED = 'COMPLETED',\n  CONDITIONAL = 'CONDITIONAL', // NR state\n  CONDITION = 'CONDITION', // NR name state\n  CONSUMED = 'CONSUMED',\n  DRAFT = 'DRAFT',\n  EXPIRED = 'EXPIRED',\n  HISTORICAL = 'HISTORICAL',\n  HOLD = 'HOLD',\n  INPROGRESS = 'INPROGRESS',\n  PENDING_PAYMENT = 'PENDING_PAYMENT',\n  REFUND_REQUESTED = 'REFUND_REQUESTED',\n  REJECTED = 'REJECTED',\n  NRO_UPDATING = 'NRO_UPDATING',\n\n  // ADDITIONAL UI STATES FOR ERROR HANDLING\n  NOT_APPROVED = 'NOT_APPROVED',\n  NOT_FOUND = 'NOT_FOUND',\n  NEED_CONSENT = 'NEED_CONSENT',\n  INVALID = 'INVALID'\n}\n","import Vue from 'vue'\nimport { Component } from 'vue-property-decorator'\nimport { isDate } from 'lodash'\nimport { ApiDateTimeUtc, IsoDatePacific } from '@bcrs-shared-components/interfaces'\n\n/**\n * This is a local, minimal mixin containing only the methods needed for the shared\n * components when they run within this project (ie, in Storybook).\n *\n * When imported into an app project, the shared components should use the mixins\n * local to that project.\n */\n@Component({\n  extends: Vue\n})\nexport default class DateMixin extends Vue {\n  /**\n   * Creates and returns a new Date object in UTC, given parameters in Pacific timezone.\n   * (This works regardless of user's local clock/timezone.)\n   * @example \"2021, 0, 1, 0, 0\" -> \"2021-01-01T08:00:00.000Z\"\n   * @example \"2021, 6, 1, 0, 0\" -> \"2021-07-01T07:00:00.000Z\"\n   */\n  createUtcDate (year: number, month: number, day: number, hours = 0, minutes = 0): Date {\n    // 1. create the new date in UTC\n    // 2. compute the offset between UTC and Pacific timezone\n    // 3. add the offset to convert the date to Pacific timezone\n    // Ref: https://stackoverflow.com/questions/15141762/\n    const date = new Date(Date.UTC(year, month, day, hours, minutes))\n    const utcDate = new Date(date.toLocaleString('en-US', { timeZone: 'UTC' }))\n    const tzDate = new Date(date.toLocaleString('en-US', { timeZone: 'America/Vancouver' }))\n    const offset = utcDate.getTime() - tzDate.getTime()\n    date.setTime(date.getTime() + offset)\n\n    return date\n  }\n\n  /**\n   * Converts an API datetime string (in UTC) to a Date object.\n   * @example 2021-08-05T16:56:50.783101+00:00 -> 2021-08-05T16:56:50Z\n   */\n  apiToDate (dateTimeString: ApiDateTimeUtc): Date {\n    if (!dateTimeString) return null // safety check\n\n    // chop off the milliseconds and UTC offset and append \"Zulu\" timezone abbreviation\n    // eg, 2020-08-28T21:53:58Z\n    dateTimeString = dateTimeString.slice(0, 19) + 'Z'\n\n    // NB: this `new Date()` is safe because the string is already UTC format\n    //     so the conversion to JS Date ignores the browser's local timezone\n    return new Date(dateTimeString)\n  }\n\n  /**\n   * Converts a date string (YYYY-MM-DD) to a Date object at 12:00:00 am Pacific time.\n   * @example 2021-11-22 -> 2021-11-22T08:00:00.00Z\n   */\n  yyyyMmDdToDate (dateStr: IsoDatePacific): Date {\n    // safety checks\n    if (!dateStr) return null\n    if (dateStr.length !== 10) return null\n\n    const split = dateStr.split('-')\n    const year = +split[0]\n    const month = +split[1]\n    const day = +split[2]\n\n    return this.createUtcDate(year, (month - 1), day)\n  }\n\n  /**\n   * Converts a Date object to a date string (YYYY-MM-DD) in Pacific timezone.\n   * @example \"2021-01-01 07:00:00 GMT\" -> \"2020-12-31\"\n   * @example \"2021-01-01 08:00:00 GMT\" -> \"2021-01-01\"\n   */\n  dateToYyyyMmDd (date: Date): IsoDatePacific {\n    // safety check\n    if (!isDate(date) || isNaN(date.getTime())) return null\n\n    // NB: some versions of Node have only en-US locale\n    // so use that and convert results accordingly\n    const dateStr = date.toLocaleDateString('en-US', {\n      timeZone: 'America/Vancouver',\n      month: 'numeric', // 12\n      day: 'numeric', // 31\n      year: 'numeric' // 2020\n    })\n\n    // convert mm/dd/yyyy to yyyy-mm-dd\n    // and make sure month and day are 2 digits (eg, 03)\n    const [ mm, dd, yyyy ] = dateStr.split('/')\n    return `${yyyy}-${mm.padStart(2, '0')}-${dd.padStart(2, '0')}`\n  }\n\n  /**\n   * Converts a Date object to a date string (Month Day, Year) in Pacific timezone.\n   * @param longMonth whether to show long month name (eg, December vs Dec)\n   * @param showWeekday whether to show the weekday name (eg, Thursday)\n   * @example \"2021-01-01 07:00:00 GMT\" -> \"Dec 31, 2020\"\n   * @example \"2021-01-01 08:00:00 GMT\" -> \"Jan 1, 2021\"\n   */\n  dateToPacificDate (date: Date, longMonth = false, showWeekday = false): string {\n    // safety check\n    if (!isDate(date) || isNaN(date.getTime())) return null\n\n    // NB: some versions of Node have only en-US locale\n    // so use that and convert results accordingly\n    let dateStr = date.toLocaleDateString('en-US', {\n      timeZone: 'America/Vancouver',\n      weekday: showWeekday ? 'long' : undefined, // Thursday or nothing\n      month: longMonth ? 'long' : 'short', // December or Dec.\n      day: 'numeric', // 31\n      year: 'numeric' // 2020\n    })\n\n    // remove period after month\n    dateStr = dateStr.replace('.', '')\n\n    return dateStr\n  }\n\n  /**\n   * Converts a date string (YYYY-MM-DD) to a date string (Month Day, Year) in Pacific timezone.\n   * @param longMonth whether to show long month name (eg, December vs Dec)\n   * @param showWeekday whether to show the weekday name (eg, Thursday)\n   * @example \"2021-01-01\" -> \"Thursday, December 31, 2020\"\n   */\n  yyyyMmDdToPacificDate (dateStr: IsoDatePacific, longMonth = false, showWeekday = false): string {\n    return this.dateToPacificDate(this.yyyyMmDdToDate(dateStr), longMonth, showWeekday)\n  }\n\n  /**\n     * Converts a Date object to a time string (HH:MM am/pm) in Pacific timezone.\n     * @example \"2021-01-01 07:00:00 GMT\" -> \"11:00 pm\"\n     * @example \"2021-01-01 08:00:00 GMT\" -> \"12:00 am\"\n     */\n  dateToPacificTime (date: Date): string {\n    // safety check\n    if (!isDate(date) || isNaN(date.getTime())) return null\n\n    // NB: some versions of Node have only en-US locale\n    // so use that and convert results accordingly\n    let timeStr = date.toLocaleTimeString('en-US', {\n      timeZone: 'America/Vancouver',\n      hour: 'numeric', // 11\n      minute: '2-digit', // 00\n      hour12: true // a.m./p.m.\n    })\n\n    // replace AM with am and PM with pm\n    timeStr = timeStr.replace('AM', 'am').replace('PM', 'pm')\n\n    return timeStr\n  }\n\n  /**\n   * Converts an API datetime string (in UTC) to a date and time string (Month Day, Year at HH:MM am/pm\n   * Pacific time).\n   * @example \"2021-01-01T00:00:00.000000+00:00\" -> \"Dec 31, 2020 at 04:00 pm Pacific time\" (PST example)\n   * @example \"2021-07-01T00:00:00.000000+00:00\" -> \"Jun 30, 2021 at 05:00 pm Pacific time\" (PDT example)\n   */\n  apiToPacificDateTime (dateTimeString: ApiDateTimeUtc): string {\n    if (!dateTimeString) return null // safety check\n\n    const date = this.apiToDate(dateTimeString)\n    const dateStr = this.dateToPacificDate(date, true)\n    const timeStr = this.dateToPacificTime(date)\n\n    return `${dateStr} at ${timeStr} Pacific time`\n  }\n\n  /**\n   * Add a number of months to a date and return \"YYYY-MM-DD\".\n   * Date must be in the format of \"YYYY-MM-DD\" and months is a number\n   * @example (3, 2023-02-03) -> \"2023-05-03\"\n   * @example (18, 2023-02-03) -> \"2024-08-03\"\n   */\n  addMonthsToDate (month: number, date: string): string {\n    if (!date) {\n      date = '2023-01-01'\n    }\n    const temp = this.yyyyMmDdToDate(date)\n    temp.setMonth(temp.getMonth() + month)\n    const dateAfterAddition = this.dateToYyyyMmDd(temp)\n    return dateAfterAddition\n  }\n\n  /**\n   * Decrease one date from another and return number of months as the difference.\n   * Dates must be in the \"YYYY-MM-DD\" format\n   * @example (2023-02-03, 2024-08-03) -> 18\n   * @example (2023-02-03, 2023-04-03) -> 2\n   */\n  subtractDates (dateFrom: string, dateTo: string): number {\n    if (!dateFrom) {\n      dateFrom = '2023-01-01'\n    }\n    if (!dateTo) {\n      dateTo = this.addMonthsToDate(24, dateFrom)\n    }\n    const expiryDate = this.yyyyMmDdToDate(dateTo)\n    const currDate = this.yyyyMmDdToDate(dateFrom)\n    const monthDiff = expiryDate.getMonth() - currDate.getMonth()\n    const yearDiff = (12 * (expiryDate.getFullYear() - currDate.getFullYear()))\n    let difference = monthDiff + yearDiff\n    // For example if Jan 31st and March 1, difference is 1 not 2\n    if (expiryDate.getDate() < currDate.getDate()) {\n      difference--\n    }\n    return difference\n  }\n}\n","import Vue from 'vue'\nimport { Component } from 'vue-property-decorator'\nimport { NameRequestStates, NrRequestActionCodes } from '@bcrs-shared-components/enums'\nimport { NameRequestIF } from '@bcrs-shared-components/interfaces'\n\n/**\n * Mixin that provides some useful Name Request utilities.\n */\n@Component({})\nexport default class NameRequestMixin extends Vue {\n  /**\n   * Validates a name request against the applicant's information.\n   * Throws an error if there is a problem.\n   * @param nameRequest the name request object\n   * @param nrRequestActionCode the request action code to match\n   * @param businessId the business identifier to match\n   * @param phone the applicant's phone number to match\n   * @param email the applicant's email address to match\n   * @returns the name request object\n   */\n  validateNameRequest (\n    nameRequest: NameRequestIF,\n    nrRequestActionCode: NrRequestActionCodes,\n    businessId?: string,\n    phone?: string,\n    email?: string\n  ): NameRequestIF {\n    // ensure NR is valid\n    const invalid = this.isNrInvalid(nameRequest)\n    if (invalid) {\n      throw new Error(`Invalid Name Request: ${invalid}`)\n    }\n\n    if (nameRequest.request_action_cd !== nrRequestActionCode) {\n      throw new Error('Incorrect Request Action Code')\n    }\n\n    // match business id\n    if (businessId && nameRequest.corpNum !== businessId) {\n      throw new Error('Incorrect Business ID')\n    }\n\n    // match email\n    if (email && nameRequest.applicants?.emailAddress !== email) {\n      throw new Error('Incorrect Email Address')\n    }\n\n    // match phone\n    if (phone && nameRequest.applicants?.phoneNumber !== phone) {\n      throw new Error('Incorrect Phone Number')\n    }\n\n    // ensure NR is consumable\n    const state = this.getNrState(nameRequest)\n    if (state !== NameRequestStates.APPROVED && state !== NameRequestStates.CONDITIONAL) {\n      throw new Error(`Invalid Name Request state: ${state}`)\n    }\n\n    return nameRequest\n  }\n\n  /**\n   * Returns error message if the Name Request data is invalid (or null if valid).\n   * @param nameRequest the name request object\n   * @param requestActionCode the request action code to match\n   */\n  isNrInvalid (nameRequest: NameRequestIF): string {\n    if (!nameRequest) return 'Invalid NR object'\n    if (!nameRequest.applicants) return 'Invalid NR applicants'\n    if (!nameRequest.expirationDate) return 'Invalid NR expiration date\\n(NR may still be processing)'\n    if (!nameRequest.legalType) return 'Invalid NR legal type'\n    if (!this.getNrApprovedName(nameRequest)) return 'Invalid NR approved name'\n    if (!nameRequest.nrNum) return 'Invalid NR number'\n    if (!nameRequest.requestTypeCd) return 'Invalid NR request type code'\n    if (!nameRequest.request_action_cd) return 'Invalid NR request action code'\n    if (!nameRequest.state) return 'Invalid NR state'\n    return null\n  }\n\n  /**\n   * Returns the Name Request's state.\n   * @param nameRequest the name request object\n   */\n  getNrState (nameRequest: NameRequestIF): NameRequestStates {\n    // ensure a NR object is provided\n    if (!nameRequest) return null\n\n    // if the NR is awaiting consent, it is not consumable\n    // null = consent not required\n    // R = consent received\n    // N = consent waived\n    // Y = consent required\n    if (nameRequest.state === NameRequestStates.CONDITIONAL &&\n      nameRequest.consentFlag !== null && nameRequest.consentFlag !== 'R' && nameRequest.consentFlag !== 'N') {\n      return NameRequestStates.NEED_CONSENT\n    }\n\n    // if the NR's root state is not APPROVED or CONDITIONAL, it is not consumable\n    // NB: EXPIRED or CONSUMED should not return NOT_APPROVED\n    if (![NameRequestStates.APPROVED, NameRequestStates.CONDITIONAL,\n      NameRequestStates.EXPIRED, NameRequestStates.CONSUMED].includes(nameRequest.state)) {\n      return NameRequestStates.NOT_APPROVED\n    }\n\n    // otherwise, the NR is consumable\n    return nameRequest.state // APPROVED or CONDITIONAL or CONSUMED or EXPIRED\n  }\n\n  /**\n   * Returns the Name Request's approved name (or undefined or null if not found).\n   * @param nameRequest the name request object\n   */\n  getNrApprovedName (nameRequest: NameRequestIF): string {\n    if (nameRequest?.names?.length > 0) {\n      return nameRequest.names\n        .find(name => [NameRequestStates.APPROVED, NameRequestStates.CONDITION].includes(name.state))?.name\n    }\n    return null // invalid NR or names array\n  }\n\n  /**\n   * Maps the request action code to a display description.\n   * @param requestActionCode the request action code\n   */\n  getNrRequestDesc (requestActionCode: NrRequestActionCodes): string {\n    switch (requestActionCode) {\n      case NrRequestActionCodes.NEW_BUSINESS: return 'New Business'\n      case NrRequestActionCodes.CHANGE_NAME: return 'Change of Name'\n      case NrRequestActionCodes.CONVERSION: return 'Conversion'\n      case NrRequestActionCodes.RESTORE: return 'Restoration'\n    }\n    return null // should never happen\n  }\n}\n","import { Component, Vue } from 'vue-property-decorator'\n\nimport countries from 'country-list/data.json'\nimport provinces from 'provinces/provinces.json'\n\n// import these and sort them only once globally\nwindow['countries'] = window['countries'] || countries\n  .sort((a, b) => (a.name < b.name) ? -1 : (a.name > b.name) ? 1 : 0)\n\nwindow['provinces'] = window['provinces'] || provinces\n  .sort((a, b) => (a.name < b.name) ? -1 : (a.name > b.name) ? 1 : 0)\n\n// global caching to improve performance when called multiple times\nwindow['countryNameCache'] = {}\nwindow['countryRegionsCache'] = {}\nwindow['canadaRegionsNoBCCache'] = {}\n\n/**\n * Mixin that allows VM access to useful country/province data and functions.\n * @link https://www.npmjs.com/package/country-list\n * @lint https://www.npmjs.com/package/provinces\n */\n@Component({})\nexport default class CountriesProvincesMixin extends Vue {\n  /**\n   * Helper function to return a list of countries.\n   * @returns An array of country objects, sorted alphabetically.\n   */\n  getCountries (): Array<object> {\n    return window['countries']\n  }\n\n  /**\n   * Helper function to return a country's name.\n   * @param code The short code of the country.\n   * @returns The long name of the country.\n   */\n  getCountryName (code: string): string {\n    if (!code) return null\n    if (window['countryNameCache'][code]) return window['countryNameCache'][code]\n    const country = window['countries'].find(c => c.code === code)\n    const result = country ? country.name : null\n    window['countryNameCache'][code] = result\n    return result\n  }\n\n  /**\n   * Helper function to return a country's list of provinces.\n   * @param code The short code of the country.\n   * @returns An array of province objects, sorted alphabetically.\n   */\n  getCountryRegions (code: string): Array<object> {\n    if (!code) return null\n    if (window['countryRegionsCache'][code]) return window['countryRegionsCache'][code]\n    const result = window['provinces']\n      .filter(p => p.country === code)\n      .map(p => ({\n        name: p.english || p.name,\n        short: (p.short && p.short.length <= 2) ? p.short : '--'\n      }))\n    window['countryRegionsCache'][code] = result\n    return result\n  }\n\n  /**\n   * Helper function to return a list of Canadian provinces (excluding BC).\n   * @returns An array of province objects (excluding BC), sorted alphabetically.\n   */\n  getCanadaRegionsExcludeBC (): Array<object> {\n    const countryCode = 'CA'\n    if (window['canadaRegionsNoBCCache'][countryCode]) return window['canadaRegionsNoBCCache'][countryCode]\n    const result = window['provinces']\n      .filter(p => p.country === 'CA' && p.short !== 'BC')\n      .map(p => ({\n        name: p.english || p.name,\n        short: (p.short && p.short.length <= 2) ? p.short : '--'\n      }))\n    window['canadaRegionsNoBCCache'][countryCode] = result\n    return result\n  }\n}\n","import { Component, Vue } from 'vue-property-decorator'\n\n/**\n * Mixin that provides some useful validation utilities.\n */\n@Component({})\nexport default class ValidationMixin extends Vue {\n  /**\n   * Creates a Vuetify rules object from the Vuelidate state.\n   * @param model The name of the model we are validating.\n   * @returns A Vuetify rules object.\n   */\n  public createVuetifyRulesObject (model: string): { [attr: string]: Array<any> } {\n    const obj = {\n      streetAddress: [],\n      streetAddressAdditional: [],\n      addressCity: [],\n      addressRegion: [],\n      postalCode: [],\n      addressCountry: [],\n      deliveryInstructions: []\n    }\n\n    // ensure Vuelidate state object is initialized\n    if (this.$v && this.$v[model]) {\n      // iterate over Vuelidate object properties\n      Object.keys(this.$v[model])\n        // only look at validation properties\n        .filter(prop => prop.charAt(0) !== '$')\n        .forEach(prop => {\n          // create array for each validation property\n          obj[prop] = []\n          // iterate over validation property params\n          Object.keys(this.$v[model][prop].$params)\n            .forEach(param => {\n              // add specified validation functions to array\n              switch (param) {\n                case 'required': obj[prop].push(() => this.requiredRule(model, prop)); break\n                case 'minLength': obj[prop].push(() => this.minLengthRule(model, prop)); break\n                case 'maxLength': obj[prop].push(() => this.maxLengthRule(model, prop)); break\n                case 'isCanada': obj[prop].push(() => this.isCanadaRule(model, prop)); break\n                case 'isBC': obj[prop].push(() => this.isBCRule(model, prop)); break\n                // FUTURE: add extra validation functions here\n                default: break\n              }\n            })\n        })\n    }\n\n    // sample return object\n    // streetAddress: [\n    //   () => this.requiredRule('addressLocal', 'streetAddress'),\n    //   () => this.minLengthRule('addressLocal', 'streetAddress'),\n    //   () => this.maxLengthRule('addressLocal', 'streetAddress')\n    // ],\n    // ...\n\n    return obj\n  }\n\n  /**\n   * Misc Vuetify rules.\n   * @param prop The name of the property object to validate.\n   * @param key The name of the property key (field) to validate.\n   * @returns True if the rule passes, otherwise an error string.\n   */\n  protected requiredRule (prop: string, key: string): boolean | string {\n    return Boolean(this.$v[prop] && this.$v[prop][key].required) || 'This field is required'\n  }\n\n  protected minLengthRule (prop: string, key: string): boolean | string {\n    const min = this.$v[prop][key].$params.minLength.min\n    return Boolean(this.$v[prop] && this.$v[prop][key].minLength) || `Minimum length is ${min}`\n  }\n\n  protected maxLengthRule (prop: string, key: string): boolean | string {\n    const max = this.$v[prop][key].$params.maxLength.max\n    return Boolean(this.$v[prop] && this.$v[prop][key].maxLength) || `Maximum length is ${max}`\n  }\n\n  // FUTURE: generalize this rule to take a validation parameter (ie, 'CA')\n  protected isCanadaRule (prop: string, key: string): boolean | string {\n    return Boolean(this.$v[prop] && this.$v[prop][key].isCanada) || `Address must be in Canada`\n  }\n\n  // FUTURE: generalize this rule to take a validation parameter (ie, 'BC')\n  protected isBCRule (prop: string, key: string): boolean | string {\n    return Boolean(this.$v[prop] && this.$v[prop][key].isBC) || `Address must be in BC`\n  }\n}\n"],"names":["NrRequestActionCodes","NameRequestStates","DateMixin","Vue","year","month","day","hours","minutes","date","utcDate","tzDate","offset","dateTimeString","dateStr","split","isDate","mm","dd","yyyy","longMonth","showWeekday","timeStr","temp","dateFrom","dateTo","expiryDate","currDate","monthDiff","yearDiff","difference","__decorateClass","Component","NameRequestMixin","nameRequest","nrRequestActionCode","businessId","phone","email","invalid","_a","_b","state","name","requestActionCode","countries","a","b","provinces","CountriesProvincesMixin","code","country","c","result","p","countryCode","ValidationMixin","model","obj","prop","param","key","min","max"],"mappings":"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"}